

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Dec 14 21:24:56 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    31                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    32  0000                     
    33                           ; Version 2.20
    34                           ; Generated 12/02/2020 GMT
    35                           ; 
    36                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F4550 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     
    68                           	psect	idataCOMRAM
    69  0011A6                     __pidataCOMRAM:
    70                           	callstack 0
    71                           
    72                           ;initializer for _AlmContra
    73  0011A6  31                 	db	49
    74  0011A7  32                 	db	50
    75  0011A8  33                 	db	51
    76  0011A9  34                 	db	52
    77                           
    78                           ;initializer for _mynum
    79  0011AA  0001               	dw	1
    80                           
    81                           ;initializer for _retardo
    82  0011AC  0064               	dw	100
    83                           
    84                           	psect	smallconst
    85  000800                     __psmallconst:
    86                           	callstack 0
    87  000800  00                 	db	0
    88  000801                     Keypad_Key_Press@F3594:
    89                           	callstack 0
    90  000801  37                 	db	55
    91  000802  38                 	db	56
    92  000803  39                 	db	57
    93  000804  2F                 	db	47
    94  000805  34                 	db	52
    95  000806  35                 	db	53
    96  000807  36                 	db	54
    97  000808  2A                 	db	42
    98  000809  31                 	db	49
    99  00080A  32                 	db	50
   100  00080B  33                 	db	51
   101  00080C  2D                 	db	45
   102  00080D  0D                 	db	13
   103  00080E  30                 	db	48
   104  00080F  3D                 	db	61
   105  000810  2B                 	db	43
   106  000811  00                 	db	0
   107  000812                     __end_ofKeypad_Key_Press@F3594:
   108                           	callstack 0
   109  0000                     _TRISB	set	3987
   110  0000                     _TRISAbits	set	3986
   111  0000                     _LATC	set	3979
   112  0000                     _TRISC	set	3988
   113  0000                     _TMR0L	set	4054
   114  0000                     _T0CONbits	set	4053
   115  0000                     _INTCONbits	set	4082
   116  0000                     _PORTD	set	3971
   117  0000                     _PORTDbits	set	3971
   118  0000                     _LATD	set	3980
   119  0000                     _TRISD	set	3989
   120  0000                     _ADRESH	set	4036
   121  0000                     _ADCON2	set	4032
   122  0000                     _ADCON1	set	4033
   123  0000                     _PORTBbits	set	3969
   124  0000                     _GO_DONE	set	32273
   125  0000                     _ADON	set	32272
   126  000812                     STR_4:
   127  000812  43                 	db	67	;'C'
   128  000813  4C                 	db	76	;'L'
   129  000814  41                 	db	65	;'A'
   130  000815  56                 	db	86	;'V'
   131  000816  45                 	db	69	;'E'
   132  000817  20                 	db	32
   133  000818  49                 	db	73	;'I'
   134  000819  4E                 	db	78	;'N'
   135  00081A  43                 	db	67	;'C'
   136  00081B  4F                 	db	79	;'O'
   137  00081C  52                 	db	82	;'R'
   138  00081D  52                 	db	82	;'R'
   139  00081E  45                 	db	69	;'E'
   140  00081F  43                 	db	67	;'C'
   141  000820  54                 	db	84	;'T'
   142  000821  41                 	db	65	;'A'
   143  000822  00                 	db	0
   144  000823                     STR_1:
   145  000823  20                 	db	32
   146  000824  20                 	db	32
   147  000825  20                 	db	32
   148  000826  20                 	db	32
   149  000827  20                 	db	32
   150  000828  20                 	db	32
   151  000829  20                 	db	32
   152  00082A  20                 	db	32
   153  00082B  20                 	db	32
   154  00082C  20                 	db	32
   155  00082D  20                 	db	32
   156  00082E  20                 	db	32
   157  00082F  20                 	db	32
   158  000830  20                 	db	32
   159  000831  20                 	db	32
   160  000832  00                 	db	0
   161  000833                     STR_3:
   162  000833  43                 	db	67	;'C'
   163  000834  4C                 	db	76	;'L'
   164  000835  41                 	db	65	;'A'
   165  000836  56                 	db	86	;'V'
   166  000837  45                 	db	69	;'E'
   167  000838  20                 	db	32
   168  000839  43                 	db	67	;'C'
   169  00083A  4F                 	db	79	;'O'
   170  00083B  52                 	db	82	;'R'
   171  00083C  52                 	db	82	;'R'
   172  00083D  45                 	db	69	;'E'
   173  00083E  43                 	db	67	;'C'
   174  00083F  54                 	db	84	;'T'
   175  000840  41                 	db	65	;'A'
   176  000841  00                 	db	0
   177  000842                     STR_5:
   178  000842  50                 	db	80	;'P'
   179  000843  41                 	db	65	;'A'
   180  000844  52                 	db	82	;'R'
   181  000845  4B                 	db	75	;'K'
   182  000846  49                 	db	73	;'I'
   183  000847  4E                 	db	78	;'N'
   184  000848  47                 	db	71	;'G'
   185  000849  20                 	db	32
   186  00084A  50                 	db	80	;'P'
   187  00084B  4C                 	db	76	;'L'
   188  00084C  55                 	db	85	;'U'
   189  00084D  53                 	db	83	;'S'
   190  00084E  00                 	db	0
   191  00084F  00                 	db	0	; dummy byte at the end
   192  0000                     
   193                           ; #config settings
   194                           
   195                           	psect	cinit
   196  0010E8                     __pcinit:
   197                           	callstack 0
   198  0010E8                     start_initialization:
   199                           	callstack 0
   200  0010E8                     __initialization:
   201                           	callstack 0
   202                           
   203                           ; Initialize objects allocated to COMRAM (8 bytes)
   204                           ; load TBLPTR registers with __pidataCOMRAM
   205  0010E8  0EA6               	movlw	low __pidataCOMRAM
   206  0010EA  6EF6               	movwf	tblptrl,c
   207  0010EC  0E11               	movlw	high __pidataCOMRAM
   208  0010EE  6EF7               	movwf	tblptrh,c
   209  0010F0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   210  0010F2  6EF8               	movwf	tblptru,c
   211  0010F4  EE00  F030         	lfsr	0,__pdataCOMRAM
   212  0010F8  EE10 F008          	lfsr	1,8
   213  0010FC                     copy_data0:
   214  0010FC  0009               	tblrd		*+
   215  0010FE  CFF5 FFEE          	movff	tablat,postinc0
   216  001102  50E5               	movf	postdec1,w,c
   217  001104  50E1               	movf	fsr1l,w,c
   218  001106  E1FA               	bnz	copy_data0
   219                           
   220                           ; Clear objects allocated to COMRAM (9 bytes)
   221  001108  EE00  F027         	lfsr	0,__pbssCOMRAM
   222  00110C  0E09               	movlw	9
   223  00110E                     clear_0:
   224  00110E  6AEE               	clrf	postinc0,c
   225  001110  06E8               	decf	wreg,f,c
   226  001112  E1FD               	bnz	clear_0
   227  001114                     end_of_initialization:
   228                           	callstack 0
   229  001114                     __end_of__initialization:
   230                           	callstack 0
   231  001114  0E00               	movlw	low (__Lmediumconst shr (0+16))
   232  001116  6EF8               	movwf	tblptru,c
   233  001118  0100               	movlb	0
   234  00111A  EF1D  F008         	goto	_main	;jump to C main() function
   235                           
   236                           	psect	bssCOMRAM
   237  000027                     __pbssCOMRAM:
   238                           	callstack 0
   239  000027                     _contador:
   240                           	callstack 0
   241  000027                     	ds	2
   242  000029                     _Estado_Teclado:
   243                           	callstack 0
   244  000029                     	ds	1
   245  00002A                     _SelectTecla:
   246                           	callstack 0
   247  00002A                     	ds	1
   248  00002B                     _SelectContra:
   249                           	callstack 0
   250  00002B                     	ds	4
   251  00002F                     _MYcount:
   252                           	callstack 0
   253  00002F                     	ds	1
   254                           
   255                           	psect	dataCOMRAM
   256  000030                     __pdataCOMRAM:
   257                           	callstack 0
   258  000030                     _AlmContra:
   259                           	callstack 0
   260  000030                     	ds	4
   261  000034                     _mynum:
   262                           	callstack 0
   263  000034                     	ds	2
   264  000036                     _retardo:
   265                           	callstack 0
   266  000036                     	ds	2
   267                           
   268                           	psect	cstackCOMRAM
   269  000001                     __pcstackCOMRAM:
   270                           	callstack 0
   271  000001                     ?_isdigit:
   272                           	callstack 0
   273  000001                     ?_isspace:
   274                           	callstack 0
   275  000001                     ?___wmul:
   276                           	callstack 0
   277  000001                     Lcd_Port@a:
   278                           	callstack 0
   279  000001                     ___wmul@multiplier:
   280                           	callstack 0
   281  000001                     isdigit@c:
   282                           	callstack 0
   283  000001                     isspace@c:
   284                           	callstack 0
   285  000001                     Keypad_Key_Press@keypad:
   286                           	callstack 0
   287                           
   288                           ; 17 bytes @ 0x0
   289  000001                     	ds	1
   290  000002                     ??_Lcd_Cmd:
   291  000002                     Lcd_Write_Char@temp:
   292                           	callstack 0
   293                           
   294                           ; 1 bytes @ 0x1
   295  000002                     	ds	1
   296  000003                     ??_isdigit:
   297  000003                     ??_isspace:
   298  000003                     Lcd_Cmd@a:
   299                           	callstack 0
   300  000003                     Lcd_Write_Char@y:
   301                           	callstack 0
   302  000003                     ___wmul@multiplicand:
   303                           	callstack 0
   304                           
   305                           ; 2 bytes @ 0x2
   306  000003                     	ds	1
   307  000004                     ??_Lcd_Init:
   308  000004                     Lcd_Set_Cursor@b:
   309                           	callstack 0
   310  000004                     Lcd_Write_Char@a:
   311                           	callstack 0
   312                           
   313                           ; 1 bytes @ 0x3
   314  000004                     	ds	1
   315  000005                     Lcd_Set_Cursor@a:
   316                           	callstack 0
   317  000005                     Lcd_Write_String@a:
   318                           	callstack 0
   319  000005                     ___wmul@product:
   320                           	callstack 0
   321                           
   322                           ; 2 bytes @ 0x4
   323  000005                     	ds	1
   324  000006                     Lcd_Set_Cursor@z:
   325                           	callstack 0
   326                           
   327                           ; 1 bytes @ 0x5
   328  000006                     	ds	1
   329  000007                     ??_Lcd_Write_String:
   330  000007                     Lcd_Set_Cursor@y:
   331                           	callstack 0
   332  000007                     _isspace$831:
   333                           	callstack 0
   334                           
   335                           ; 1 bytes @ 0x6
   336  000007                     	ds	1
   337  000008                     ?_atoi:
   338                           	callstack 0
   339  000008                     Lcd_Set_Cursor@temp:
   340                           	callstack 0
   341  000008                     atoi@s:
   342                           	callstack 0
   343                           
   344                           ; 2 bytes @ 0x7
   345  000008                     	ds	1
   346  000009                     Lcd_Write_String@i:
   347                           	callstack 0
   348                           
   349                           ; 2 bytes @ 0x8
   350  000009                     	ds	1
   351  00000A                     ??_atoi:
   352                           
   353                           ; 1 bytes @ 0x9
   354  00000A                     	ds	4
   355  00000E                     atoi@neg:
   356                           	callstack 0
   357                           
   358                           ; 2 bytes @ 0xD
   359  00000E                     	ds	2
   360  000010                     _atoi$813:
   361                           	callstack 0
   362                           
   363                           ; 2 bytes @ 0xF
   364  000010                     	ds	2
   365  000012                     Keypad_Key_Press@tecla:
   366                           	callstack 0
   367  000012                     _atoi$815:
   368                           	callstack 0
   369                           
   370                           ; 2 bytes @ 0x11
   371  000012                     	ds	2
   372  000014                     _atoi$814:
   373                           	callstack 0
   374  000014                     Keypad_Key_Press@fila:
   375                           	callstack 0
   376                           
   377                           ; 2 bytes @ 0x13
   378  000014                     	ds	1
   379  000015                     atoi@n:
   380                           	callstack 0
   381                           
   382                           ; 2 bytes @ 0x14
   383  000015                     	ds	2
   384  000017                     ??_Validacion_Contra:
   385                           
   386                           ; 1 bytes @ 0x16
   387  000017                     	ds	4
   388  00001B                     _Validacion_Contra$341:
   389                           	callstack 0
   390                           
   391                           ; 2 bytes @ 0x1A
   392  00001B                     	ds	2
   393  00001D                     _Validacion_Contra$345:
   394                           	callstack 0
   395                           
   396                           ; 2 bytes @ 0x1C
   397  00001D                     	ds	2
   398  00001F                     _Validacion_Contra$346:
   399                           	callstack 0
   400                           
   401                           ; 2 bytes @ 0x1E
   402  00001F                     	ds	2
   403  000021                     _Validacion_Contra$347:
   404                           	callstack 0
   405                           
   406                           ; 2 bytes @ 0x20
   407  000021                     	ds	2
   408  000023                     Validacion_Contra@i:
   409                           	callstack 0
   410                           
   411                           ; 2 bytes @ 0x22
   412  000023                     	ds	2
   413  000025                     RepetirOpcion@valor:
   414                           	callstack 0
   415                           
   416                           ; 2 bytes @ 0x24
   417  000025                     	ds	2
   418  000027                     
   419                           ; 1 bytes @ 0x26
   420 ;;
   421 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   422 ;;
   423 ;; *************** function _main *****************
   424 ;; Defined at:
   425 ;;		line 204 in file "led.c"
   426 ;; Parameters:    Size  Location     Type
   427 ;;		None
   428 ;; Auto vars:     Size  Location     Type
   429 ;;		None
   430 ;; Return value:  Size  Location     Type
   431 ;;                  1    wreg      void 
   432 ;; Registers used:
   433 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   434 ;; Tracked objects:
   435 ;;		On entry : 0/0
   436 ;;		On exit  : 0/0
   437 ;;		Unchanged: 0/0
   438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   439 ;;      Params:         0       0       0       0       0       0       0       0       0
   440 ;;      Locals:         0       0       0       0       0       0       0       0       0
   441 ;;      Temps:          0       0       0       0       0       0       0       0       0
   442 ;;      Totals:         0       0       0       0       0       0       0       0       0
   443 ;;Total ram usage:        0 bytes
   444 ;; Hardware stack levels required when called:    5
   445 ;; This function calls:
   446 ;;		_Keypad_Init
   447 ;;		_Lcd_Clear
   448 ;;		_Lcd_Init
   449 ;;		_Lcd_Set_Cursor
   450 ;;		_Lcd_Write_String
   451 ;;		_RepetirOpcion
   452 ;; This function is called by:
   453 ;;		Startup code after reset
   454 ;; This function uses a non-reentrant model
   455 ;;
   456                           
   457                           	psect	text0
   458  00103A                     __ptext0:
   459                           	callstack 0
   460  00103A                     _main:
   461                           	callstack 26
   462  00103A                     
   463                           ;led.c: 206:     TRISB = 0;
   464  00103A  0E00               	movlw	0
   465  00103C  6E93               	movwf	147,c	;volatile
   466                           
   467                           ;led.c: 207:     ADCON1 = 0b00001111;
   468  00103E  0E0F               	movlw	15
   469  001040  6EC1               	movwf	193,c	;volatile
   470  001042                     
   471                           ;led.c: 209:     Keypad_Init();
   472  001042  ECD7  F008         	call	_Keypad_Init	;wreg free
   473  001046                     
   474                           ;led.c: 210:     Lcd_Init();
   475  001046  EC0B  F007         	call	_Lcd_Init	;wreg free
   476  00104A                     
   477                           ;led.c: 211:     Lcd_Clear();
   478  00104A  ECCC  F008         	call	_Lcd_Clear	;wreg free
   479  00104E                     
   480                           ;led.c: 212:     Lcd_Set_Cursor(1, 6);
   481  00104E  0E06               	movlw	6
   482  001050  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   483  001052  0E01               	movlw	1
   484  001054  EC43  F007         	call	_Lcd_Set_Cursor
   485  001058                     
   486                           ;led.c: 213:     Lcd_Write_String("PARKING PLUS");
   487  001058  0E42               	movlw	low STR_5
   488  00105A  6E05               	movwf	Lcd_Write_String@a^0,c
   489  00105C  0E08               	movlw	high STR_5
   490  00105E  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
   491  001060  ECA4  F007         	call	_Lcd_Write_String	;wreg free
   492  001064                     l1704:
   493                           
   494                           ;led.c: 215:         RepetirOpcion(retardo);
   495  001064  C036  F025         	movff	_retardo,RepetirOpcion@valor
   496  001068  C037  F026         	movff	_retardo+1,RepetirOpcion@valor+1
   497  00106C  EC8F  F008         	call	_RepetirOpcion	;wreg free
   498  001070  EF32  F008         	goto	l1704
   499  001074  EF00  F000         	goto	start
   500  001078                     __end_of_main:
   501                           	callstack 0
   502                           
   503 ;; *************** function _RepetirOpcion *****************
   504 ;; Defined at:
   505 ;;		line 196 in file "led.c"
   506 ;; Parameters:    Size  Location     Type
   507 ;;  valor           2   36[COMRAM] int 
   508 ;; Auto vars:     Size  Location     Type
   509 ;;		None
   510 ;; Return value:  Size  Location     Type
   511 ;;                  1    wreg      void 
   512 ;; Registers used:
   513 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   514 ;; Tracked objects:
   515 ;;		On entry : 0/0
   516 ;;		On exit  : 0/0
   517 ;;		Unchanged: 0/0
   518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   519 ;;      Params:         2       0       0       0       0       0       0       0       0
   520 ;;      Locals:         0       0       0       0       0       0       0       0       0
   521 ;;      Temps:          0       0       0       0       0       0       0       0       0
   522 ;;      Totals:         2       0       0       0       0       0       0       0       0
   523 ;;Total ram usage:        2 bytes
   524 ;; Hardware stack levels used:    1
   525 ;; Hardware stack levels required when called:    4
   526 ;; This function calls:
   527 ;;		_Validacion_Contra
   528 ;; This function is called by:
   529 ;;		_main
   530 ;; This function uses a non-reentrant model
   531 ;;
   532                           
   533                           	psect	text1
   534  00111E                     __ptext1:
   535                           	callstack 0
   536  00111E                     _RepetirOpcion:
   537                           	callstack 26
   538  00111E                     
   539                           ;led.c: 197:     while (valor > 0) {
   540  00111E  EF9B  F008         	goto	l1686
   541  001122                     l1680:
   542                           
   543                           ;led.c: 198:         _delay((unsigned long)((700)*(8000000/4000000.0)));
   544  001122  0EC8               	movlw	200
   545  001124                     u1017:
   546  001124  D000               	nop2	
   547  001126  D000               	nop2	
   548  001128  2EE8               	decfsz	wreg,f,c
   549  00112A  D7FC               	bra	u1017
   550  00112C                     
   551                           ;led.c: 199:         Validacion_Contra();
   552  00112C  EC28  F004         	call	_Validacion_Contra	;wreg free
   553  001130                     
   554                           ;led.c: 200:         valor--;
   555  001130  0625               	decf	RepetirOpcion@valor^0,f,c
   556  001132  A0D8               	btfss	status,0,c
   557  001134  0626               	decf	(RepetirOpcion@valor+1)^0,f,c
   558  001136                     l1686:
   559                           
   560                           ;led.c: 197:     while (valor > 0) {
   561  001136  BE26               	btfsc	(RepetirOpcion@valor+1)^0,7,c
   562  001138  EFA8  F008         	goto	u1000
   563  00113C  5026               	movf	(RepetirOpcion@valor+1)^0,w,c
   564  00113E  E106               	bnz	u1001
   565  001140  0425               	decf	RepetirOpcion@valor^0,w,c
   566  001142  B0D8               	btfsc	status,0,c
   567  001144  EFA6  F008         	goto	u1001
   568  001148  EFA8  F008         	goto	u1000
   569  00114C                     u1001:
   570  00114C  EF91  F008         	goto	l1680
   571  001150                     u1000:
   572  001150  0012               	return		;funcret
   573  001152                     __end_of_RepetirOpcion:
   574                           	callstack 0
   575                           
   576 ;; *************** function _Validacion_Contra *****************
   577 ;; Defined at:
   578 ;;		line 111 in file "led.c"
   579 ;; Parameters:    Size  Location     Type
   580 ;;		None
   581 ;; Auto vars:     Size  Location     Type
   582 ;;  i               2   34[COMRAM] int 
   583 ;; Return value:  Size  Location     Type
   584 ;;                  1    wreg      void 
   585 ;; Registers used:
   586 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   587 ;; Tracked objects:
   588 ;;		On entry : 0/0
   589 ;;		On exit  : 0/0
   590 ;;		Unchanged: 0/0
   591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   592 ;;      Params:         0       0       0       0       0       0       0       0       0
   593 ;;      Locals:        10       0       0       0       0       0       0       0       0
   594 ;;      Temps:          4       0       0       0       0       0       0       0       0
   595 ;;      Totals:        14       0       0       0       0       0       0       0       0
   596 ;;Total ram usage:       14 bytes
   597 ;; Hardware stack levels used:    1
   598 ;; Hardware stack levels required when called:    3
   599 ;; This function calls:
   600 ;;		_ContadorCarros
   601 ;;		_Keypad_Key_Press
   602 ;;		_Lcd_Set_Cursor
   603 ;;		_Lcd_Write_Char
   604 ;;		_Lcd_Write_String
   605 ;;		_atoi
   606 ;;		_isdigit
   607 ;; This function is called by:
   608 ;;		_RepetirOpcion
   609 ;; This function uses a non-reentrant model
   610 ;;
   611                           
   612                           	psect	text2
   613  000850                     __ptext2:
   614                           	callstack 0
   615  000850                     _Validacion_Contra:
   616                           	callstack 26
   617  000850                     
   618                           ;led.c: 112:     SelectTecla = Keypad_Key_Press();
   619  000850  ECB0  F006         	call	_Keypad_Key_Press	;wreg free
   620  000854  6E2A               	movwf	_SelectTecla^0,c
   621                           
   622                           ;led.c: 118:     switch (Estado_Teclado) {
   623  000856  EFC9  F005         	goto	l1642
   624  00085A                     l1510:
   625                           
   626                           ;led.c: 120:             if ((SelectTecla != 0) && ((0 ? isdigit(SelectTecla) : ((unsign
      +                          ed)(SelectTecla)-'0') < 10))) {
   627  00085A  502A               	movf	_SelectTecla^0,w,c
   628  00085C  B4D8               	btfsc	status,2,c
   629  00085E  EF33  F004         	goto	u771
   630  000862  EF35  F004         	goto	u770
   631  000866                     u771:
   632  000866  EFEA  F005         	goto	l163
   633  00086A                     u770:
   634  00086A  0ED0               	movlw	208
   635  00086C  6E17               	movwf	??_Validacion_Contra^0,c
   636  00086E  0EFF               	movlw	255
   637  000870  6E18               	movwf	(??_Validacion_Contra+1)^0,c
   638  000872  502A               	movf	_SelectTecla^0,w,c
   639  000874  6E19               	movwf	(??_Validacion_Contra+2)^0,c
   640  000876  6A1A               	clrf	(??_Validacion_Contra+3)^0,c
   641  000878  5017               	movf	??_Validacion_Contra^0,w,c
   642  00087A  2619               	addwf	(??_Validacion_Contra+2)^0,f,c
   643  00087C  5018               	movf	(??_Validacion_Contra+1)^0,w,c
   644  00087E  221A               	addwfc	(??_Validacion_Contra+3)^0,f,c
   645  000880  501A               	movf	(??_Validacion_Contra+3)^0,w,c
   646  000882  E10A               	bnz	u780
   647  000884  0E0A               	movlw	10
   648  000886  5C19               	subwf	(??_Validacion_Contra+2)^0,w,c
   649  000888  A0D8               	btfss	status,0,c
   650  00088A  EF49  F004         	goto	u781
   651  00088E  EF4C  F004         	goto	u780
   652  000892                     u781:
   653  000892  0E01               	movlw	1
   654  000894  EF4D  F004         	goto	u790
   655  000898                     u780:
   656  000898  0E00               	movlw	0
   657  00089A                     u790:
   658  00089A  6E1B               	movwf	_Validacion_Contra$341^0,c
   659  00089C  6A1C               	clrf	(_Validacion_Contra$341+1)^0,c
   660  00089E  501B               	movf	_Validacion_Contra$341^0,w,c
   661  0008A0  101C               	iorwf	(_Validacion_Contra$341+1)^0,w,c
   662  0008A2  B4D8               	btfsc	status,2,c
   663  0008A4  EF56  F004         	goto	u801
   664  0008A8  EF58  F004         	goto	u800
   665  0008AC                     u801:
   666  0008AC  EFEA  F005         	goto	l163
   667  0008B0                     u800:
   668  0008B0                     
   669                           ;led.c: 121:                 SelectContra[0] = SelectTecla;
   670  0008B0  C02A  F02B         	movff	_SelectTecla,_SelectContra
   671  0008B4                     
   672                           ;led.c: 122:                 Estado_Teclado = N2;
   673  0008B4  0E01               	movlw	1
   674  0008B6  6E29               	movwf	_Estado_Teclado^0,c
   675  0008B8                     
   676                           ;led.c: 123:                 Lcd_Set_Cursor(2, 1);
   677  0008B8  0E01               	movlw	1
   678  0008BA  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   679  0008BC  0E02               	movlw	2
   680  0008BE  EC43  F007         	call	_Lcd_Set_Cursor
   681  0008C2                     
   682                           ;led.c: 124:                 Lcd_Write_String("               ");
   683  0008C2  0E23               	movlw	low STR_1
   684  0008C4  6E05               	movwf	Lcd_Write_String@a^0,c
   685  0008C6  0E08               	movlw	high STR_1
   686  0008C8  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
   687  0008CA  ECA4  F007         	call	_Lcd_Write_String	;wreg free
   688  0008CE                     
   689                           ;led.c: 125:                 Lcd_Set_Cursor(2, 8);
   690  0008CE  0E08               	movlw	8
   691  0008D0  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   692  0008D2  0E02               	movlw	2
   693  0008D4  EC43  F007         	call	_Lcd_Set_Cursor
   694  0008D8                     
   695                           ;led.c: 126:                 Lcd_Write_Char(SelectTecla);
   696  0008D8  502A               	movf	_SelectTecla^0,w,c
   697  0008DA  EC58  F008         	call	_Lcd_Write_Char
   698  0008DE                     l1530:
   699                           
   700                           ;led.c: 127:                 _delay((unsigned long)((400)*(8000000/4000.0)));
   701  0008DE  0E05               	movlw	5
   702  0008E0  6E18               	movwf	(??_Validacion_Contra+1)^0,c
   703  0008E2  0E0F               	movlw	15
   704  0008E4  6E17               	movwf	??_Validacion_Contra^0,c
   705  0008E6  0EF1               	movlw	241
   706  0008E8                     u1027:
   707  0008E8  2EE8               	decfsz	wreg,f,c
   708  0008EA  D7FE               	bra	u1027
   709  0008EC  2E17               	decfsz	??_Validacion_Contra^0,f,c
   710  0008EE  D7FC               	bra	u1027
   711  0008F0  2E18               	decfsz	(??_Validacion_Contra+1)^0,f,c
   712  0008F2  D7FA               	bra	u1027
   713  0008F4  F000               	nop	
   714  0008F6  EFEA  F005         	goto	l163
   715  0008FA                     l1532:
   716                           
   717                           ;led.c: 132:             if ((SelectTecla != 0) && ((0 ? isdigit(SelectTecla) : ((unsign
      +                          ed)(SelectTecla)-'0') < 10))) {
   718  0008FA  502A               	movf	_SelectTecla^0,w,c
   719  0008FC  B4D8               	btfsc	status,2,c
   720  0008FE  EF83  F004         	goto	u811
   721  000902  EF85  F004         	goto	u810
   722  000906                     u811:
   723  000906  EFEA  F005         	goto	l163
   724  00090A                     u810:
   725  00090A  0ED0               	movlw	208
   726  00090C  6E17               	movwf	??_Validacion_Contra^0,c
   727  00090E  0EFF               	movlw	255
   728  000910  6E18               	movwf	(??_Validacion_Contra+1)^0,c
   729  000912  502A               	movf	_SelectTecla^0,w,c
   730  000914  6E19               	movwf	(??_Validacion_Contra+2)^0,c
   731  000916  6A1A               	clrf	(??_Validacion_Contra+3)^0,c
   732  000918  5017               	movf	??_Validacion_Contra^0,w,c
   733  00091A  2619               	addwf	(??_Validacion_Contra+2)^0,f,c
   734  00091C  5018               	movf	(??_Validacion_Contra+1)^0,w,c
   735  00091E  221A               	addwfc	(??_Validacion_Contra+3)^0,f,c
   736  000920  501A               	movf	(??_Validacion_Contra+3)^0,w,c
   737  000922  E10A               	bnz	u820
   738  000924  0E0A               	movlw	10
   739  000926  5C19               	subwf	(??_Validacion_Contra+2)^0,w,c
   740  000928  A0D8               	btfss	status,0,c
   741  00092A  EF99  F004         	goto	u821
   742  00092E  EF9C  F004         	goto	u820
   743  000932                     u821:
   744  000932  0E01               	movlw	1
   745  000934  EF9D  F004         	goto	u830
   746  000938                     u820:
   747  000938  0E00               	movlw	0
   748  00093A                     u830:
   749  00093A  6E1D               	movwf	_Validacion_Contra$345^0,c
   750  00093C  6A1E               	clrf	(_Validacion_Contra$345+1)^0,c
   751  00093E  501D               	movf	_Validacion_Contra$345^0,w,c
   752  000940  101E               	iorwf	(_Validacion_Contra$345+1)^0,w,c
   753  000942  B4D8               	btfsc	status,2,c
   754  000944  EFA6  F004         	goto	u841
   755  000948  EFA8  F004         	goto	u840
   756  00094C                     u841:
   757  00094C  EFEA  F005         	goto	l163
   758  000950                     u840:
   759  000950                     
   760                           ;led.c: 133:                 SelectContra[1] = SelectTecla;
   761  000950  C02A  F02C         	movff	_SelectTecla,_SelectContra+1
   762  000954                     
   763                           ;led.c: 134:                 Estado_Teclado = N3;
   764  000954  0E02               	movlw	2
   765  000956  6E29               	movwf	_Estado_Teclado^0,c
   766  000958                     
   767                           ;led.c: 135:                 Lcd_Set_Cursor(2, 9);
   768  000958  0E09               	movlw	9
   769  00095A  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   770  00095C  0E02               	movlw	2
   771  00095E  EC43  F007         	call	_Lcd_Set_Cursor
   772  000962                     
   773                           ;led.c: 136:                 Lcd_Write_Char(SelectTecla);
   774  000962  502A               	movf	_SelectTecla^0,w,c
   775  000964  EC58  F008         	call	_Lcd_Write_Char
   776  000968  EF6F  F004         	goto	l1530
   777  00096C                     l1550:
   778                           
   779                           ;led.c: 141:             if ((SelectTecla != 0) && ((0 ? isdigit(SelectTecla) : ((unsign
      +                          ed)(SelectTecla)-'0') < 10))) {
   780  00096C  502A               	movf	_SelectTecla^0,w,c
   781  00096E  B4D8               	btfsc	status,2,c
   782  000970  EFBC  F004         	goto	u851
   783  000974  EFBE  F004         	goto	u850
   784  000978                     u851:
   785  000978  EFEA  F005         	goto	l163
   786  00097C                     u850:
   787  00097C  0ED0               	movlw	208
   788  00097E  6E17               	movwf	??_Validacion_Contra^0,c
   789  000980  0EFF               	movlw	255
   790  000982  6E18               	movwf	(??_Validacion_Contra+1)^0,c
   791  000984  502A               	movf	_SelectTecla^0,w,c
   792  000986  6E19               	movwf	(??_Validacion_Contra+2)^0,c
   793  000988  6A1A               	clrf	(??_Validacion_Contra+3)^0,c
   794  00098A  5017               	movf	??_Validacion_Contra^0,w,c
   795  00098C  2619               	addwf	(??_Validacion_Contra+2)^0,f,c
   796  00098E  5018               	movf	(??_Validacion_Contra+1)^0,w,c
   797  000990  221A               	addwfc	(??_Validacion_Contra+3)^0,f,c
   798  000992  501A               	movf	(??_Validacion_Contra+3)^0,w,c
   799  000994  E10A               	bnz	u860
   800  000996  0E0A               	movlw	10
   801  000998  5C19               	subwf	(??_Validacion_Contra+2)^0,w,c
   802  00099A  A0D8               	btfss	status,0,c
   803  00099C  EFD2  F004         	goto	u861
   804  0009A0  EFD5  F004         	goto	u860
   805  0009A4                     u861:
   806  0009A4  0E01               	movlw	1
   807  0009A6  EFD6  F004         	goto	u870
   808  0009AA                     u860:
   809  0009AA  0E00               	movlw	0
   810  0009AC                     u870:
   811  0009AC  6E1F               	movwf	_Validacion_Contra$346^0,c
   812  0009AE  6A20               	clrf	(_Validacion_Contra$346+1)^0,c
   813  0009B0  501F               	movf	_Validacion_Contra$346^0,w,c
   814  0009B2  1020               	iorwf	(_Validacion_Contra$346+1)^0,w,c
   815  0009B4  B4D8               	btfsc	status,2,c
   816  0009B6  EFDF  F004         	goto	u881
   817  0009BA  EFE1  F004         	goto	u880
   818  0009BE                     u881:
   819  0009BE  EFEA  F005         	goto	l163
   820  0009C2                     u880:
   821  0009C2                     
   822                           ;led.c: 142:                 SelectContra[2] = SelectTecla;
   823  0009C2  C02A  F02D         	movff	_SelectTecla,_SelectContra+2
   824  0009C6                     
   825                           ;led.c: 143:                 Estado_Teclado = N4;
   826  0009C6  0E03               	movlw	3
   827  0009C8  6E29               	movwf	_Estado_Teclado^0,c
   828  0009CA                     
   829                           ;led.c: 144:                 Lcd_Set_Cursor(2, 10);
   830  0009CA  0E0A               	movlw	10
   831  0009CC  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   832  0009CE  0E02               	movlw	2
   833  0009D0  EC43  F007         	call	_Lcd_Set_Cursor
   834  0009D4                     
   835                           ;led.c: 145:                 Lcd_Write_Char(SelectTecla);
   836  0009D4  502A               	movf	_SelectTecla^0,w,c
   837  0009D6  EC58  F008         	call	_Lcd_Write_Char
   838  0009DA  EF6F  F004         	goto	l1530
   839  0009DE                     l1568:
   840                           
   841                           ;led.c: 150:             if ((SelectTecla != 0) && ((0 ? isdigit(SelectTecla) : ((unsign
      +                          ed)(SelectTecla)-'0') < 10))) {
   842  0009DE  502A               	movf	_SelectTecla^0,w,c
   843  0009E0  B4D8               	btfsc	status,2,c
   844  0009E2  EFF5  F004         	goto	u891
   845  0009E6  EFF7  F004         	goto	u890
   846  0009EA                     u891:
   847  0009EA  EFEA  F005         	goto	l163
   848  0009EE                     u890:
   849  0009EE  0ED0               	movlw	208
   850  0009F0  6E17               	movwf	??_Validacion_Contra^0,c
   851  0009F2  0EFF               	movlw	255
   852  0009F4  6E18               	movwf	(??_Validacion_Contra+1)^0,c
   853  0009F6  502A               	movf	_SelectTecla^0,w,c
   854  0009F8  6E19               	movwf	(??_Validacion_Contra+2)^0,c
   855  0009FA  6A1A               	clrf	(??_Validacion_Contra+3)^0,c
   856  0009FC  5017               	movf	??_Validacion_Contra^0,w,c
   857  0009FE  2619               	addwf	(??_Validacion_Contra+2)^0,f,c
   858  000A00  5018               	movf	(??_Validacion_Contra+1)^0,w,c
   859  000A02  221A               	addwfc	(??_Validacion_Contra+3)^0,f,c
   860  000A04  501A               	movf	(??_Validacion_Contra+3)^0,w,c
   861  000A06  E10A               	bnz	u900
   862  000A08  0E0A               	movlw	10
   863  000A0A  5C19               	subwf	(??_Validacion_Contra+2)^0,w,c
   864  000A0C  A0D8               	btfss	status,0,c
   865  000A0E  EF0B  F005         	goto	u901
   866  000A12  EF0E  F005         	goto	u900
   867  000A16                     u901:
   868  000A16  0E01               	movlw	1
   869  000A18  EF0F  F005         	goto	u910
   870  000A1C                     u900:
   871  000A1C  0E00               	movlw	0
   872  000A1E                     u910:
   873  000A1E  6E21               	movwf	_Validacion_Contra$347^0,c
   874  000A20  6A22               	clrf	(_Validacion_Contra$347+1)^0,c
   875  000A22  5021               	movf	_Validacion_Contra$347^0,w,c
   876  000A24  1022               	iorwf	(_Validacion_Contra$347+1)^0,w,c
   877  000A26  B4D8               	btfsc	status,2,c
   878  000A28  EF18  F005         	goto	u921
   879  000A2C  EF1A  F005         	goto	u920
   880  000A30                     u921:
   881  000A30  EFEA  F005         	goto	l163
   882  000A34                     u920:
   883  000A34                     
   884                           ;led.c: 151:                 SelectContra[3] = SelectTecla;
   885  000A34  C02A  F02E         	movff	_SelectTecla,_SelectContra+3
   886  000A38                     
   887                           ;led.c: 152:                 Estado_Teclado = VAL;
   888  000A38  0E04               	movlw	4
   889  000A3A  6E29               	movwf	_Estado_Teclado^0,c
   890  000A3C                     
   891                           ;led.c: 153:                 Lcd_Set_Cursor(2, 11);
   892  000A3C  0E0B               	movlw	11
   893  000A3E  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   894  000A40  0E02               	movlw	2
   895  000A42  EC43  F007         	call	_Lcd_Set_Cursor
   896  000A46                     
   897                           ;led.c: 154:                 Lcd_Write_Char(SelectTecla);
   898  000A46  502A               	movf	_SelectTecla^0,w,c
   899  000A48  EC58  F008         	call	_Lcd_Write_Char
   900  000A4C  EF6F  F004         	goto	l1530
   901  000A50                     l1586:
   902                           
   903                           ;led.c: 159:             if ((SelectTecla != 0) && (SelectTecla != '=')) {
   904  000A50  502A               	movf	_SelectTecla^0,w,c
   905  000A52  B4D8               	btfsc	status,2,c
   906  000A54  EF2E  F005         	goto	u931
   907  000A58  EF30  F005         	goto	u930
   908  000A5C                     u931:
   909  000A5C  EF54  F005         	goto	l1598
   910  000A60                     u930:
   911  000A60  0E3D               	movlw	61
   912  000A62  182A               	xorwf	_SelectTecla^0,w,c
   913  000A64  B4D8               	btfsc	status,2,c
   914  000A66  EF37  F005         	goto	u941
   915  000A6A  EF39  F005         	goto	u940
   916  000A6E                     u941:
   917  000A6E  EF54  F005         	goto	l1598
   918  000A72                     u940:
   919  000A72                     
   920                           ;led.c: 160:                 Estado_Teclado = N1;
   921  000A72  0E00               	movlw	0
   922  000A74  6E29               	movwf	_Estado_Teclado^0,c
   923  000A76                     
   924                           ;led.c: 161:                 Lcd_Set_Cursor(2, 9);
   925  000A76  0E09               	movlw	9
   926  000A78  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   927  000A7A  0E02               	movlw	2
   928  000A7C  EC43  F007         	call	_Lcd_Set_Cursor
   929  000A80                     
   930                           ;led.c: 162:                 Lcd_Write_String("               ");
   931  000A80  0E23               	movlw	low STR_1
   932  000A82  6E05               	movwf	Lcd_Write_String@a^0,c
   933  000A84  0E08               	movlw	high STR_1
   934  000A86  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
   935  000A88  ECA4  F007         	call	_Lcd_Write_String	;wreg free
   936  000A8C                     l1596:
   937                           
   938                           ;led.c: 163:                 _delay((unsigned long)((600)*(8000000/4000.0)));
   939  000A8C  0E07               	movlw	7
   940  000A8E  6E18               	movwf	(??_Validacion_Contra+1)^0,c
   941  000A90  0E17               	movlw	23
   942  000A92  6E17               	movwf	??_Validacion_Contra^0,c
   943  000A94  0E6A               	movlw	106
   944  000A96                     u1037:
   945  000A96  2EE8               	decfsz	wreg,f,c
   946  000A98  D7FE               	bra	u1037
   947  000A9A  2E17               	decfsz	??_Validacion_Contra^0,f,c
   948  000A9C  D7FC               	bra	u1037
   949  000A9E  2E18               	decfsz	(??_Validacion_Contra+1)^0,f,c
   950  000AA0  D7FA               	bra	u1037
   951  000AA2  D000               	nop2	
   952                           
   953                           ;led.c: 164:             } else if ((SelectTecla != 0) && (SelectTecla == '=')) {
   954  000AA4  EFEA  F005         	goto	l163
   955  000AA8                     l1598:
   956  000AA8  502A               	movf	_SelectTecla^0,w,c
   957  000AAA  B4D8               	btfsc	status,2,c
   958  000AAC  EF5A  F005         	goto	u951
   959  000AB0  EF5C  F005         	goto	u950
   960  000AB4                     u951:
   961  000AB4  EFEA  F005         	goto	l163
   962  000AB8                     u950:
   963  000AB8  0E3D               	movlw	61
   964  000ABA  182A               	xorwf	_SelectTecla^0,w,c
   965  000ABC  A4D8               	btfss	status,2,c
   966  000ABE  EF63  F005         	goto	u961
   967  000AC2  EF65  F005         	goto	u960
   968  000AC6                     u961:
   969  000AC6  EFEA  F005         	goto	l163
   970  000ACA                     u960:
   971  000ACA                     
   972                           ;led.c: 166:                 for (int i = 0; i <= 4; i++) {
   973  000ACA  0E00               	movlw	0
   974  000ACC  6E24               	movwf	(Validacion_Contra@i+1)^0,c
   975  000ACE  0E00               	movlw	0
   976  000AD0  6E23               	movwf	Validacion_Contra@i^0,c
   977  000AD2                     l1608:
   978                           
   979                           ;led.c: 168:                     if (AlmContra[i] == SelectContra[i]) {
   980  000AD2  0E2B               	movlw	low _SelectContra
   981  000AD4  2423               	addwf	Validacion_Contra@i^0,w,c
   982  000AD6  6ED9               	movwf	fsr2l,c
   983  000AD8  0E00               	movlw	high _SelectContra
   984  000ADA  2024               	addwfc	(Validacion_Contra@i+1)^0,w,c
   985  000ADC  6EDA               	movwf	fsr2h,c
   986  000ADE  0E30               	movlw	low _AlmContra
   987  000AE0  2423               	addwf	Validacion_Contra@i^0,w,c
   988  000AE2  6EE1               	movwf	fsr1l,c
   989  000AE4  0E00               	movlw	high _AlmContra
   990  000AE6  2024               	addwfc	(Validacion_Contra@i+1)^0,w,c
   991  000AE8  6EE2               	movwf	fsr1h,c
   992  000AEA  50DE               	movf	postinc2,w,c
   993  000AEC  18E6               	xorwf	postinc1,w,c
   994  000AEE  A4D8               	btfss	status,2,c
   995  000AF0  EF7C  F005         	goto	u971
   996  000AF4  EF7E  F005         	goto	u970
   997  000AF8                     u971:
   998  000AF8  EF80  F005         	goto	l160
   999  000AFC                     u970:
  1000  000AFC                     
  1001                           ;led.c: 169:                         contador++;
  1002  000AFC  4A27               	infsnz	_contador^0,f,c
  1003  000AFE  2A28               	incf	(_contador+1)^0,f,c
  1004  000B00                     l160:
  1005                           
  1006                           ;led.c: 171:                 }
  1007  000B00  4A23               	infsnz	Validacion_Contra@i^0,f,c
  1008  000B02  2A24               	incf	(Validacion_Contra@i+1)^0,f,c
  1009  000B04  BE24               	btfsc	(Validacion_Contra@i+1)^0,7,c
  1010  000B06  EF8E  F005         	goto	u981
  1011  000B0A  5024               	movf	(Validacion_Contra@i+1)^0,w,c
  1012  000B0C  E109               	bnz	u980
  1013  000B0E  0E05               	movlw	5
  1014  000B10  5C23               	subwf	Validacion_Contra@i^0,w,c
  1015  000B12  A0D8               	btfss	status,0,c
  1016  000B14  EF8E  F005         	goto	u981
  1017  000B18  EF90  F005         	goto	u980
  1018  000B1C                     u981:
  1019  000B1C  EF69  F005         	goto	l1608
  1020  000B20                     u980:
  1021  000B20                     
  1022                           ;led.c: 173:                 if (contador == 4) {
  1023  000B20  0E04               	movlw	4
  1024  000B22  1827               	xorwf	_contador^0,w,c
  1025  000B24  1028               	iorwf	(_contador+1)^0,w,c
  1026  000B26  A4D8               	btfss	status,2,c
  1027  000B28  EF98  F005         	goto	u991
  1028  000B2C  EF9A  F005         	goto	u990
  1029  000B30                     u991:
  1030  000B30  EFAE  F005         	goto	l1628
  1031  000B34                     u990:
  1032  000B34                     
  1033                           ;led.c: 174:                     TRISB = 0;
  1034  000B34  0E00               	movlw	0
  1035  000B36  6E93               	movwf	147,c	;volatile
  1036                           
  1037                           ;led.c: 175:                     ADCON1 = 0b00001111;
  1038  000B38  0E0F               	movlw	15
  1039  000B3A  6EC1               	movwf	193,c	;volatile
  1040  000B3C                     
  1041                           ;led.c: 177:                     Lcd_Set_Cursor(2, 1);
  1042  000B3C  0E01               	movlw	1
  1043  000B3E  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  1044  000B40  0E02               	movlw	2
  1045  000B42  EC43  F007         	call	_Lcd_Set_Cursor
  1046  000B46                     
  1047                           ;led.c: 178:                     Lcd_Write_String("CLAVE CORRECTA");
  1048  000B46  0E33               	movlw	low STR_3
  1049  000B48  6E05               	movwf	Lcd_Write_String@a^0,c
  1050  000B4A  0E08               	movlw	high STR_3
  1051  000B4C  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  1052  000B4E  ECA4  F007         	call	_Lcd_Write_String	;wreg free
  1053  000B52                     
  1054                           ;led.c: 179:                     PORTBbits.RB0 = 1;
  1055  000B52  8081               	bsf	129,0,c	;volatile
  1056  000B54                     
  1057                           ;led.c: 180:                     ContadorCarros();
  1058  000B54  ECF8  F007         	call	_ContadorCarros	;wreg free
  1059  000B58  EF46  F005         	goto	l1596
  1060  000B5C                     l1628:
  1061                           
  1062                           ;led.c: 184:                     SelectContra[4] = 0;
  1063  000B5C  0E00               	movlw	0
  1064  000B5E  6E2F               	movwf	(_SelectContra+4)^0,c
  1065  000B60                     
  1066                           ;led.c: 185:                     retardo = atoi(SelectContra);
  1067  000B60  0E2B               	movlw	low _SelectContra
  1068  000B62  6E08               	movwf	atoi@s^0,c
  1069  000B64  0E00               	movlw	high _SelectContra
  1070  000B66  6E09               	movwf	(atoi@s+1)^0,c
  1071  000B68  ECEB  F005         	call	_atoi	;wreg free
  1072  000B6C  C008  F036         	movff	?_atoi,_retardo
  1073  000B70  C009  F037         	movff	?_atoi+1,_retardo+1
  1074  000B74                     
  1075                           ;led.c: 186:                     Estado_Teclado = N1;
  1076  000B74  0E00               	movlw	0
  1077  000B76  6E29               	movwf	_Estado_Teclado^0,c
  1078  000B78                     
  1079                           ;led.c: 187:                     Lcd_Set_Cursor(2, 1);
  1080  000B78  0E01               	movlw	1
  1081  000B7A  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  1082  000B7C  0E02               	movlw	2
  1083  000B7E  EC43  F007         	call	_Lcd_Set_Cursor
  1084  000B82                     
  1085                           ;led.c: 188:                     Lcd_Write_String("CLAVE INCORRECTA");
  1086  000B82  0E12               	movlw	low STR_4
  1087  000B84  6E05               	movwf	Lcd_Write_String@a^0,c
  1088  000B86  0E08               	movlw	high STR_4
  1089  000B88  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  1090  000B8A  ECA4  F007         	call	_Lcd_Write_String	;wreg free
  1091  000B8E  EF46  F005         	goto	l1596
  1092  000B92                     l1642:
  1093  000B92  5029               	movf	_Estado_Teclado^0,w,c
  1094  000B94  6E17               	movwf	??_Validacion_Contra^0,c
  1095  000B96  6A18               	clrf	(??_Validacion_Contra+1)^0,c
  1096                           
  1097                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1098                           ; Switch size 1, requested type "simple"
  1099                           ; Number of cases is 1, Range of values is 0 to 0
  1100                           ; switch strategies available:
  1101                           ; Name         Instructions Cycles
  1102                           ; simple_byte            4     3 (average)
  1103                           ;	Chosen strategy is simple_byte
  1104  000B98  5018               	movf	(??_Validacion_Contra+1)^0,w,c
  1105  000B9A  0A00               	xorlw	0	; case 0
  1106  000B9C  B4D8               	btfsc	status,2,c
  1107  000B9E  EFD3  F005         	goto	l1714
  1108  000BA2  EFEA  F005         	goto	l163
  1109  000BA6                     l1714:
  1110                           
  1111                           ; Switch size 1, requested type "simple"
  1112                           ; Number of cases is 5, Range of values is 0 to 4
  1113                           ; switch strategies available:
  1114                           ; Name         Instructions Cycles
  1115                           ; simple_byte           16     9 (average)
  1116                           ;	Chosen strategy is simple_byte
  1117  000BA6  5017               	movf	??_Validacion_Contra^0,w,c
  1118  000BA8  0A00               	xorlw	0	; case 0
  1119  000BAA  B4D8               	btfsc	status,2,c
  1120  000BAC  EF2D  F004         	goto	l1510
  1121  000BB0  0A01               	xorlw	1	; case 1
  1122  000BB2  B4D8               	btfsc	status,2,c
  1123  000BB4  EF7D  F004         	goto	l1532
  1124  000BB8  0A03               	xorlw	3	; case 2
  1125  000BBA  B4D8               	btfsc	status,2,c
  1126  000BBC  EFB6  F004         	goto	l1550
  1127  000BC0  0A01               	xorlw	1	; case 3
  1128  000BC2  B4D8               	btfsc	status,2,c
  1129  000BC4  EFEF  F004         	goto	l1568
  1130  000BC8  0A07               	xorlw	7	; case 4
  1131  000BCA  B4D8               	btfsc	status,2,c
  1132  000BCC  EF28  F005         	goto	l1586
  1133  000BD0  EFEA  F005         	goto	l163
  1134  000BD4                     l163:
  1135  000BD4  0012               	return		;funcret
  1136  000BD6                     __end_of_Validacion_Contra:
  1137                           	callstack 0
  1138                           
  1139 ;; *************** function _atoi *****************
  1140 ;; Defined at:
  1141 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\atoi.c"
  1142 ;; Parameters:    Size  Location     Type
  1143 ;;  s               2    7[COMRAM] PTR const unsigned char 
  1144 ;;		 -> SelectContra(4), 
  1145 ;; Auto vars:     Size  Location     Type
  1146 ;;  n               2   20[COMRAM] int 
  1147 ;;  neg             2   13[COMRAM] int 
  1148 ;; Return value:  Size  Location     Type
  1149 ;;                  2    7[COMRAM] int 
  1150 ;; Registers used:
  1151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1152 ;; Tracked objects:
  1153 ;;		On entry : 0/0
  1154 ;;		On exit  : 0/0
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1157 ;;      Params:         2       0       0       0       0       0       0       0       0
  1158 ;;      Locals:         9       0       0       0       0       0       0       0       0
  1159 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1160 ;;      Totals:        15       0       0       0       0       0       0       0       0
  1161 ;;Total ram usage:       15 bytes
  1162 ;; Hardware stack levels used:    1
  1163 ;; Hardware stack levels required when called:    1
  1164 ;; This function calls:
  1165 ;;		___wmul
  1166 ;;		_isdigit
  1167 ;;		_isspace
  1168 ;; This function is called by:
  1169 ;;		_Validacion_Contra
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173                           	psect	text3
  1174  000BD6                     __ptext3:
  1175                           	callstack 0
  1176  000BD6                     _atoi:
  1177                           	callstack 27
  1178  000BD6  0E00               	movlw	0
  1179  000BD8  6E16               	movwf	(atoi@n+1)^0,c
  1180  000BDA  0E00               	movlw	0
  1181  000BDC  6E15               	movwf	atoi@n^0,c
  1182  000BDE  0E00               	movlw	0
  1183  000BE0  6E0F               	movwf	(atoi@neg+1)^0,c
  1184  000BE2  0E00               	movlw	0
  1185  000BE4  6E0E               	movwf	atoi@neg^0,c
  1186  000BE6  EFF7  F005         	goto	l1470
  1187  000BEA                     l1468:
  1188  000BEA  4A08               	infsnz	atoi@s^0,f,c
  1189  000BEC  2A09               	incf	(atoi@s+1)^0,f,c
  1190  000BEE                     l1470:
  1191  000BEE  0E01               	movlw	1
  1192  000BF0  6E14               	movwf	_atoi$814^0,c
  1193  000BF2  C008  FFD9         	movff	atoi@s,fsr2l
  1194  000BF6  C009  FFDA         	movff	atoi@s+1,fsr2h
  1195  000BFA  0E20               	movlw	32
  1196  000BFC  18DE               	xorwf	postinc2,w,c
  1197  000BFE  B4D8               	btfsc	status,2,c
  1198  000C00  EF04  F006         	goto	u701
  1199  000C04  EF06  F006         	goto	u700
  1200  000C08                     u701:
  1201  000C08  EF22  F006         	goto	l1478
  1202  000C0C                     u700:
  1203  000C0C  0EF7               	movlw	247
  1204  000C0E  6E0A               	movwf	??_atoi^0,c
  1205  000C10  0EFF               	movlw	255
  1206  000C12  6E0B               	movwf	(??_atoi+1)^0,c
  1207  000C14  C008  FFD9         	movff	atoi@s,fsr2l
  1208  000C18  C009  FFDA         	movff	atoi@s+1,fsr2h
  1209  000C1C  50DF               	movf	indf2,w,c
  1210  000C1E  6E0C               	movwf	(??_atoi+2)^0,c
  1211  000C20  6A0D               	clrf	(??_atoi+3)^0,c
  1212  000C22  500A               	movf	??_atoi^0,w,c
  1213  000C24  260C               	addwf	(??_atoi+2)^0,f,c
  1214  000C26  500B               	movf	(??_atoi+1)^0,w,c
  1215  000C28  220D               	addwfc	(??_atoi+3)^0,f,c
  1216  000C2A  500D               	movf	(??_atoi+3)^0,w,c
  1217  000C2C  E109               	bnz	u710
  1218  000C2E  0E05               	movlw	5
  1219  000C30  5C0C               	subwf	(??_atoi+2)^0,w,c
  1220  000C32  A0D8               	btfss	status,0,c
  1221  000C34  EF1E  F006         	goto	u711
  1222  000C38  EF20  F006         	goto	u710
  1223  000C3C                     u711:
  1224  000C3C  EF22  F006         	goto	l1478
  1225  000C40                     u710:
  1226  000C40  0E00               	movlw	0
  1227  000C42  6E14               	movwf	_atoi$814^0,c
  1228  000C44                     l1478:
  1229  000C44  C014  F010         	movff	_atoi$814,_atoi$813
  1230  000C48  6A11               	clrf	(_atoi$813+1)^0,c
  1231  000C4A  5010               	movf	_atoi$813^0,w,c
  1232  000C4C  1011               	iorwf	(_atoi$813+1)^0,w,c
  1233  000C4E  A4D8               	btfss	status,2,c
  1234  000C50  EF2C  F006         	goto	u721
  1235  000C54  EF2E  F006         	goto	u720
  1236  000C58                     u721:
  1237  000C58  EFF5  F005         	goto	l1468
  1238  000C5C                     u720:
  1239  000C5C  EF38  F006         	goto	l1488
  1240  000C60                     l1484:
  1241  000C60  0E00               	movlw	0
  1242  000C62  6E0F               	movwf	(atoi@neg+1)^0,c
  1243  000C64  0E01               	movlw	1
  1244  000C66  6E0E               	movwf	atoi@neg^0,c
  1245  000C68                     l1486:
  1246  000C68  4A08               	infsnz	atoi@s^0,f,c
  1247  000C6A  2A09               	incf	(atoi@s+1)^0,f,c
  1248  000C6C  EF6D  F006         	goto	l1494
  1249  000C70                     l1488:
  1250  000C70  C008  FFD9         	movff	atoi@s,fsr2l
  1251  000C74  C009  FFDA         	movff	atoi@s+1,fsr2h
  1252  000C78  50DF               	movf	indf2,w,c
  1253  000C7A  6E0A               	movwf	??_atoi^0,c
  1254  000C7C  6A0B               	clrf	(??_atoi+1)^0,c
  1255                           
  1256                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1257                           ; Switch size 1, requested type "simple"
  1258                           ; Number of cases is 1, Range of values is 0 to 0
  1259                           ; switch strategies available:
  1260                           ; Name         Instructions Cycles
  1261                           ; simple_byte            4     3 (average)
  1262                           ;	Chosen strategy is simple_byte
  1263  000C7E  500B               	movf	(??_atoi+1)^0,w,c
  1264  000C80  0A00               	xorlw	0	; case 0
  1265  000C82  B4D8               	btfsc	status,2,c
  1266  000C84  EF46  F006         	goto	l1716
  1267  000C88  EF6D  F006         	goto	l1494
  1268  000C8C                     l1716:
  1269                           
  1270                           ; Switch size 1, requested type "simple"
  1271                           ; Number of cases is 2, Range of values is 43 to 45
  1272                           ; switch strategies available:
  1273                           ; Name         Instructions Cycles
  1274                           ; simple_byte            7     4 (average)
  1275                           ;	Chosen strategy is simple_byte
  1276  000C8C  500A               	movf	??_atoi^0,w,c
  1277  000C8E  0A2B               	xorlw	43	; case 43
  1278  000C90  B4D8               	btfsc	status,2,c
  1279  000C92  EF34  F006         	goto	l1486
  1280  000C96  0A06               	xorlw	6	; case 45
  1281  000C98  B4D8               	btfsc	status,2,c
  1282  000C9A  EF30  F006         	goto	l1484
  1283  000C9E  EF6D  F006         	goto	l1494
  1284  000CA2                     l1490:
  1285  000CA2  C015  F001         	movff	atoi@n,___wmul@multiplier
  1286  000CA6  C016  F002         	movff	atoi@n+1,___wmul@multiplier+1
  1287  000CAA  0E00               	movlw	0
  1288  000CAC  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1289  000CAE  0E0A               	movlw	10
  1290  000CB0  6E03               	movwf	___wmul@multiplicand^0,c
  1291  000CB2  ECA9  F008         	call	___wmul	;wreg free
  1292  000CB6  C008  FFD9         	movff	atoi@s,fsr2l
  1293  000CBA  C009  FFDA         	movff	atoi@s+1,fsr2h
  1294  000CBE  50DF               	movf	indf2,w,c
  1295  000CC0  6E0A               	movwf	??_atoi^0,c
  1296  000CC2  500A               	movf	??_atoi^0,w,c
  1297  000CC4  5E01               	subwf	?___wmul^0,f,c
  1298  000CC6  0E00               	movlw	0
  1299  000CC8  5A02               	subwfb	(?___wmul+1)^0,f,c
  1300  000CCA  0E30               	movlw	48
  1301  000CCC  2401               	addwf	?___wmul^0,w,c
  1302  000CCE  6E15               	movwf	atoi@n^0,c
  1303  000CD0  0E00               	movlw	0
  1304  000CD2  2002               	addwfc	(?___wmul+1)^0,w,c
  1305  000CD4  6E16               	movwf	(atoi@n+1)^0,c
  1306  000CD6  EF34  F006         	goto	l1486
  1307  000CDA                     l1494:
  1308  000CDA  0ED0               	movlw	208
  1309  000CDC  6E0A               	movwf	??_atoi^0,c
  1310  000CDE  0EFF               	movlw	255
  1311  000CE0  6E0B               	movwf	(??_atoi+1)^0,c
  1312  000CE2  C008  FFD9         	movff	atoi@s,fsr2l
  1313  000CE6  C009  FFDA         	movff	atoi@s+1,fsr2h
  1314  000CEA  50DF               	movf	indf2,w,c
  1315  000CEC  6E0C               	movwf	(??_atoi+2)^0,c
  1316  000CEE  6A0D               	clrf	(??_atoi+3)^0,c
  1317  000CF0  500A               	movf	??_atoi^0,w,c
  1318  000CF2  260C               	addwf	(??_atoi+2)^0,f,c
  1319  000CF4  500B               	movf	(??_atoi+1)^0,w,c
  1320  000CF6  220D               	addwfc	(??_atoi+3)^0,f,c
  1321  000CF8  500D               	movf	(??_atoi+3)^0,w,c
  1322  000CFA  E10A               	bnz	u730
  1323  000CFC  0E0A               	movlw	10
  1324  000CFE  5C0C               	subwf	(??_atoi+2)^0,w,c
  1325  000D00  A0D8               	btfss	status,0,c
  1326  000D02  EF85  F006         	goto	u731
  1327  000D06  EF88  F006         	goto	u730
  1328  000D0A                     u731:
  1329  000D0A  0E01               	movlw	1
  1330  000D0C  EF89  F006         	goto	u740
  1331  000D10                     u730:
  1332  000D10  0E00               	movlw	0
  1333  000D12                     u740:
  1334  000D12  6E12               	movwf	_atoi$815^0,c
  1335  000D14  6A13               	clrf	(_atoi$815+1)^0,c
  1336  000D16  5012               	movf	_atoi$815^0,w,c
  1337  000D18  1013               	iorwf	(_atoi$815+1)^0,w,c
  1338  000D1A  A4D8               	btfss	status,2,c
  1339  000D1C  EF92  F006         	goto	u751
  1340  000D20  EF94  F006         	goto	u750
  1341  000D24                     u751:
  1342  000D24  EF51  F006         	goto	l1490
  1343  000D28                     u750:
  1344  000D28  500E               	movf	atoi@neg^0,w,c
  1345  000D2A  100F               	iorwf	(atoi@neg+1)^0,w,c
  1346  000D2C  A4D8               	btfss	status,2,c
  1347  000D2E  EF9B  F006         	goto	u761
  1348  000D32  EF9D  F006         	goto	u760
  1349  000D36                     u761:
  1350  000D36  EFAB  F006         	goto	l879
  1351  000D3A                     u760:
  1352  000D3A  C015  F00A         	movff	atoi@n,??_atoi
  1353  000D3E  C016  F00B         	movff	atoi@n+1,??_atoi+1
  1354  000D42  1E0A               	comf	??_atoi^0,f,c
  1355  000D44  1E0B               	comf	(??_atoi+1)^0,f,c
  1356  000D46  4A0A               	infsnz	??_atoi^0,f,c
  1357  000D48  2A0B               	incf	(??_atoi+1)^0,f,c
  1358  000D4A  C00A  F008         	movff	??_atoi,?_atoi
  1359  000D4E  C00B  F009         	movff	??_atoi+1,?_atoi+1
  1360  000D52  EFAF  F006         	goto	l882
  1361  000D56                     l879:
  1362  000D56  C015  F008         	movff	atoi@n,?_atoi
  1363  000D5A  C016  F009         	movff	atoi@n+1,?_atoi+1
  1364  000D5E                     l882:
  1365  000D5E  0012               	return		;funcret
  1366  000D60                     __end_of_atoi:
  1367                           	callstack 0
  1368                           
  1369 ;; *************** function _isspace *****************
  1370 ;; Defined at:
  1371 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\isspace.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;  c               2    0[COMRAM] int 
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;		None
  1376 ;; Return value:  Size  Location     Type
  1377 ;;                  2    0[COMRAM] int 
  1378 ;; Registers used:
  1379 ;;		wreg, status,2, status,0
  1380 ;; Tracked objects:
  1381 ;;		On entry : 0/0
  1382 ;;		On exit  : 0/0
  1383 ;;		Unchanged: 0/0
  1384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1385 ;;      Params:         2       0       0       0       0       0       0       0       0
  1386 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1387 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1388 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1389 ;;Total ram usage:        7 bytes
  1390 ;; Hardware stack levels used:    1
  1391 ;; This function calls:
  1392 ;;		Nothing
  1393 ;; This function is called by:
  1394 ;;		_atoi
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398                           	psect	text4
  1399  000F9E                     __ptext4:
  1400                           	callstack 0
  1401  000F9E                     _isspace:
  1402                           	callstack 27
  1403  000F9E  0E01               	movlw	1
  1404  000FA0  6E07               	movwf	_isspace$831^0,c
  1405  000FA2  0E20               	movlw	32
  1406  000FA4  1801               	xorwf	isspace@c^0,w,c
  1407  000FA6  1002               	iorwf	(isspace@c+1)^0,w,c
  1408  000FA8  B4D8               	btfsc	status,2,c
  1409  000FAA  EFD9  F007         	goto	u571
  1410  000FAE  EFDB  F007         	goto	u570
  1411  000FB2                     u571:
  1412  000FB2  EFF4  F007         	goto	l1382
  1413  000FB6                     u570:
  1414  000FB6  0EF7               	movlw	247
  1415  000FB8  6E03               	movwf	??_isspace^0,c
  1416  000FBA  0EFF               	movlw	255
  1417  000FBC  6E04               	movwf	(??_isspace+1)^0,c
  1418  000FBE  C001  F005         	movff	isspace@c,??_isspace+2
  1419  000FC2  C002  F006         	movff	isspace@c+1,??_isspace+3
  1420  000FC6  5003               	movf	??_isspace^0,w,c
  1421  000FC8  2605               	addwf	(??_isspace+2)^0,f,c
  1422  000FCA  5004               	movf	(??_isspace+1)^0,w,c
  1423  000FCC  2206               	addwfc	(??_isspace+3)^0,f,c
  1424  000FCE  5006               	movf	(??_isspace+3)^0,w,c
  1425  000FD0  E109               	bnz	u580
  1426  000FD2  0E05               	movlw	5
  1427  000FD4  5C05               	subwf	(??_isspace+2)^0,w,c
  1428  000FD6  A0D8               	btfss	status,0,c
  1429  000FD8  EFF0  F007         	goto	u581
  1430  000FDC  EFF2  F007         	goto	u580
  1431  000FE0                     u581:
  1432  000FE0  EFF4  F007         	goto	l1382
  1433  000FE4                     u580:
  1434  000FE4  0E00               	movlw	0
  1435  000FE6  6E07               	movwf	_isspace$831^0,c
  1436  000FE8                     l1382:
  1437  000FE8  C007  F001         	movff	_isspace$831,?_isspace
  1438  000FEC  6A02               	clrf	(?_isspace+1)^0,c
  1439  000FEE  0012               	return		;funcret
  1440  000FF0                     __end_of_isspace:
  1441                           	callstack 0
  1442                           
  1443 ;; *************** function _isdigit *****************
  1444 ;; Defined at:
  1445 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\isdigit.c"
  1446 ;; Parameters:    Size  Location     Type
  1447 ;;  c               2    0[COMRAM] int 
  1448 ;; Auto vars:     Size  Location     Type
  1449 ;;		None
  1450 ;; Return value:  Size  Location     Type
  1451 ;;                  2    0[COMRAM] int 
  1452 ;; Registers used:
  1453 ;;		wreg, status,2, status,0
  1454 ;; Tracked objects:
  1455 ;;		On entry : 0/0
  1456 ;;		On exit  : 0/0
  1457 ;;		Unchanged: 0/0
  1458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1459 ;;      Params:         2       0       0       0       0       0       0       0       0
  1460 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1461 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1462 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1463 ;;Total ram usage:        6 bytes
  1464 ;; Hardware stack levels used:    1
  1465 ;; This function calls:
  1466 ;;		Nothing
  1467 ;; This function is called by:
  1468 ;;		_Validacion_Contra
  1469 ;;		_atoi
  1470 ;; This function uses a non-reentrant model
  1471 ;;
  1472                           
  1473                           	psect	text5
  1474  001078                     __ptext5:
  1475                           	callstack 0
  1476  001078                     _isdigit:
  1477                           	callstack 28
  1478  001078  0ED0               	movlw	208
  1479  00107A  6E03               	movwf	??_isdigit^0,c
  1480  00107C  0EFF               	movlw	255
  1481  00107E  6E04               	movwf	(??_isdigit+1)^0,c
  1482  001080  C001  F005         	movff	isdigit@c,??_isdigit+2
  1483  001084  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  1484  001088  5003               	movf	??_isdigit^0,w,c
  1485  00108A  2605               	addwf	(??_isdigit+2)^0,f,c
  1486  00108C  5004               	movf	(??_isdigit+1)^0,w,c
  1487  00108E  2206               	addwfc	(??_isdigit+3)^0,f,c
  1488  001090  5006               	movf	(??_isdigit+3)^0,w,c
  1489  001092  E10A               	bnz	u550
  1490  001094  0E0A               	movlw	10
  1491  001096  5C05               	subwf	(??_isdigit+2)^0,w,c
  1492  001098  A0D8               	btfss	status,0,c
  1493  00109A  EF51  F008         	goto	u551
  1494  00109E  EF54  F008         	goto	u550
  1495  0010A2                     u551:
  1496  0010A2  0E01               	movlw	1
  1497  0010A4  EF55  F008         	goto	u560
  1498  0010A8                     u550:
  1499  0010A8  0E00               	movlw	0
  1500  0010AA                     u560:
  1501  0010AA  6E01               	movwf	?_isdigit^0,c
  1502  0010AC  6A02               	clrf	(?_isdigit+1)^0,c
  1503  0010AE  0012               	return		;funcret
  1504  0010B0                     __end_of_isdigit:
  1505                           	callstack 0
  1506                           
  1507 ;; *************** function ___wmul *****************
  1508 ;; Defined at:
  1509 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\Umul16.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;  multiplier      2    0[COMRAM] unsigned int 
  1512 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1513 ;; Auto vars:     Size  Location     Type
  1514 ;;  product         2    4[COMRAM] unsigned int 
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  2    0[COMRAM] unsigned int 
  1517 ;; Registers used:
  1518 ;;		wreg, status,2, status,0, prodl, prodh
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1524 ;;      Params:         4       0       0       0       0       0       0       0       0
  1525 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1526 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1527 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1528 ;;Total ram usage:        6 bytes
  1529 ;; Hardware stack levels used:    1
  1530 ;; This function calls:
  1531 ;;		Nothing
  1532 ;; This function is called by:
  1533 ;;		_atoi
  1534 ;; This function uses a non-reentrant model
  1535 ;;
  1536                           
  1537                           	psect	text6
  1538  001152                     __ptext6:
  1539                           	callstack 0
  1540  001152                     ___wmul:
  1541                           	callstack 27
  1542  001152  5001               	movf	___wmul@multiplier^0,w,c
  1543  001154  0203               	mulwf	___wmul@multiplicand^0,c
  1544  001156  CFF3 F005          	movff	prodl,___wmul@product
  1545  00115A  CFF4 F006          	movff	prodh,___wmul@product+1
  1546  00115E  5001               	movf	___wmul@multiplier^0,w,c
  1547  001160  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1548  001162  50F3               	movf	243,w,c
  1549  001164  2606               	addwf	(___wmul@product+1)^0,f,c
  1550  001166  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1551  001168  0203               	mulwf	___wmul@multiplicand^0,c
  1552  00116A  50F3               	movf	243,w,c
  1553  00116C  2606               	addwf	(___wmul@product+1)^0,f,c
  1554  00116E  C005  F001         	movff	___wmul@product,?___wmul
  1555  001172  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1556  001176  0012               	return		;funcret
  1557  001178                     __end_of___wmul:
  1558                           	callstack 0
  1559                           
  1560 ;; *************** function _Lcd_Write_String *****************
  1561 ;; Defined at:
  1562 ;;		line 97 in file "./lcd.h"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;  a               2    4[COMRAM] PTR unsigned char 
  1565 ;;		 -> STR_5(13), STR_4(17), STR_3(15), STR_2(16), 
  1566 ;;		 -> STR_1(16), 
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;  i               2    8[COMRAM] int 
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  1    wreg      void 
  1571 ;; Registers used:
  1572 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1578 ;;      Params:         2       0       0       0       0       0       0       0       0
  1579 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1580 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1581 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1582 ;;Total ram usage:        6 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; Hardware stack levels required when called:    2
  1585 ;; This function calls:
  1586 ;;		_Lcd_Write_Char
  1587 ;; This function is called by:
  1588 ;;		_Validacion_Contra
  1589 ;;		_main
  1590 ;; This function uses a non-reentrant model
  1591 ;;
  1592                           
  1593                           	psect	text7
  1594  000F48                     __ptext7:
  1595                           	callstack 0
  1596  000F48                     _Lcd_Write_String:
  1597                           	callstack 26
  1598  000F48                     
  1599                           ;./lcd.h: 97: void Lcd_Write_String(char *a);./lcd.h: 98: {;./lcd.h: 99:  int i;;./lcd.h
      +                          : 100:  for(i=0;a[i]!='\0';i++)
  1600  000F48  0E00               	movlw	0
  1601  000F4A  6E0A               	movwf	(Lcd_Write_String@i+1)^0,c
  1602  000F4C  0E00               	movlw	0
  1603  000F4E  6E09               	movwf	Lcd_Write_String@i^0,c
  1604  000F50  EFBA  F007         	goto	l1408
  1605  000F54                     l1404:
  1606                           
  1607                           ;./lcd.h: 101:     Lcd_Write_Char(a[i]);
  1608  000F54  5009               	movf	Lcd_Write_String@i^0,w,c
  1609  000F56  2405               	addwf	Lcd_Write_String@a^0,w,c
  1610  000F58  6E07               	movwf	??_Lcd_Write_String^0,c
  1611  000F5A  500A               	movf	(Lcd_Write_String@i+1)^0,w,c
  1612  000F5C  2006               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  1613  000F5E  6E08               	movwf	(??_Lcd_Write_String+1)^0,c
  1614  000F60  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
  1615  000F64  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  1616  000F68                     	if	0	;tblptru may be non-zero
  1617  000F68                     	endif
  1618  000F68                     	if	0	;tblptru may be non-zero
  1619  000F68                     	endif
  1620  000F68  0008               	tblrd		*
  1621  000F6A  50F5               	movf	tablat,w,c
  1622  000F6C  EC58  F008         	call	_Lcd_Write_Char
  1623  000F70  4A09               	infsnz	Lcd_Write_String@i^0,f,c
  1624  000F72  2A0A               	incf	(Lcd_Write_String@i+1)^0,f,c
  1625  000F74                     l1408:
  1626  000F74  5009               	movf	Lcd_Write_String@i^0,w,c
  1627  000F76  2405               	addwf	Lcd_Write_String@a^0,w,c
  1628  000F78  6E07               	movwf	??_Lcd_Write_String^0,c
  1629  000F7A  500A               	movf	(Lcd_Write_String@i+1)^0,w,c
  1630  000F7C  2006               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  1631  000F7E  6E08               	movwf	(??_Lcd_Write_String+1)^0,c
  1632  000F80  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
  1633  000F84  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  1634  000F88                     	if	0	;tblptru may be non-zero
  1635  000F88                     	endif
  1636  000F88                     	if	0	;tblptru may be non-zero
  1637  000F88                     	endif
  1638  000F88  0008               	tblrd		*
  1639  000F8A  50F5               	movf	tablat,w,c
  1640  000F8C  0900               	iorlw	0
  1641  000F8E  A4D8               	btfss	status,2,c
  1642  000F90  EFCC  F007         	goto	u611
  1643  000F94  EFCE  F007         	goto	u610
  1644  000F98                     u611:
  1645  000F98  EFAA  F007         	goto	l1404
  1646  000F9C                     u610:
  1647  000F9C  0012               	return		;funcret
  1648  000F9E                     __end_of_Lcd_Write_String:
  1649                           	callstack 0
  1650                           
  1651 ;; *************** function _Lcd_Write_Char *****************
  1652 ;; Defined at:
  1653 ;;		line 81 in file "./lcd.h"
  1654 ;; Parameters:    Size  Location     Type
  1655 ;;  a               1    wreg     unsigned char 
  1656 ;; Auto vars:     Size  Location     Type
  1657 ;;  a               1    3[COMRAM] unsigned char 
  1658 ;;  y               1    2[COMRAM] unsigned char 
  1659 ;;  temp            1    1[COMRAM] unsigned char 
  1660 ;; Return value:  Size  Location     Type
  1661 ;;                  1    wreg      void 
  1662 ;; Registers used:
  1663 ;;		wreg, status,2, status,0, cstack
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1669 ;;      Params:         0       0       0       0       0       0       0       0       0
  1670 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1671 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1672 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1673 ;;Total ram usage:        3 bytes
  1674 ;; Hardware stack levels used:    1
  1675 ;; Hardware stack levels required when called:    1
  1676 ;; This function calls:
  1677 ;;		_Lcd_Port
  1678 ;; This function is called by:
  1679 ;;		_Lcd_Write_String
  1680 ;;		_Validacion_Contra
  1681 ;; This function uses a non-reentrant model
  1682 ;;
  1683                           
  1684                           	psect	text8
  1685  0010B0                     __ptext8:
  1686                           	callstack 0
  1687  0010B0                     _Lcd_Write_Char:
  1688                           	callstack 26
  1689                           
  1690                           ;incstack = 0
  1691                           ;Lcd_Write_Char@a stored from wreg
  1692  0010B0  6E04               	movwf	Lcd_Write_Char@a^0,c
  1693  0010B2                     
  1694                           ;./lcd.h: 81: void Lcd_Write_Char(char a);./lcd.h: 82: {;./lcd.h: 83:    char temp,y;;./
      +                          lcd.h: 84:    temp = a&0x0F;
  1695  0010B2  5004               	movf	Lcd_Write_Char@a^0,w,c
  1696  0010B4  0B0F               	andlw	15
  1697  0010B6  6E02               	movwf	Lcd_Write_Char@temp^0,c
  1698                           
  1699                           ;./lcd.h: 85:    y = a&0xF0;
  1700  0010B8  5004               	movf	Lcd_Write_Char@a^0,w,c
  1701  0010BA  0BF0               	andlw	240
  1702  0010BC  6E03               	movwf	Lcd_Write_Char@y^0,c
  1703  0010BE                     
  1704                           ;./lcd.h: 86:    PORTBbits.RB7 = 1;
  1705  0010BE  8E81               	bsf	129,7,c	;volatile
  1706  0010C0                     
  1707                           ;./lcd.h: 87:    Lcd_Port(y>>4);
  1708  0010C0  3803               	swapf	Lcd_Write_Char@y^0,w,c
  1709  0010C2  0B0F               	andlw	15
  1710  0010C4  EC76  F007         	call	_Lcd_Port
  1711  0010C8                     
  1712                           ;./lcd.h: 88:    PORTBbits.RB6 = 1;
  1713  0010C8  8C81               	bsf	129,6,c	;volatile
  1714  0010CA                     
  1715                           ;./lcd.h: 89:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  1716  0010CA  0E1A               	movlw	26
  1717  0010CC                     u1047:
  1718  0010CC  2EE8               	decfsz	wreg,f,c
  1719  0010CE  D7FE               	bra	u1047
  1720  0010D0  D000               	nop2	
  1721  0010D2                     
  1722                           ;./lcd.h: 90:    PORTBbits.RB6 = 0;
  1723  0010D2  9C81               	bcf	129,6,c	;volatile
  1724  0010D4                     
  1725                           ;./lcd.h: 91:    Lcd_Port(temp);
  1726  0010D4  5002               	movf	Lcd_Write_Char@temp^0,w,c
  1727  0010D6  EC76  F007         	call	_Lcd_Port
  1728  0010DA                     
  1729                           ;./lcd.h: 92:    PORTBbits.RB6 = 1;
  1730  0010DA  8C81               	bsf	129,6,c	;volatile
  1731  0010DC                     
  1732                           ;./lcd.h: 93:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  1733  0010DC  0E1A               	movlw	26
  1734  0010DE                     u1057:
  1735  0010DE  2EE8               	decfsz	wreg,f,c
  1736  0010E0  D7FE               	bra	u1057
  1737  0010E2  D000               	nop2	
  1738  0010E4                     
  1739                           ;./lcd.h: 94:    PORTBbits.RB6 = 0;
  1740  0010E4  9C81               	bcf	129,6,c	;volatile
  1741  0010E6  0012               	return		;funcret
  1742  0010E8                     __end_of_Lcd_Write_Char:
  1743                           	callstack 0
  1744                           
  1745 ;; *************** function _Lcd_Set_Cursor *****************
  1746 ;; Defined at:
  1747 ;;		line 41 in file "./lcd.h"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;  a               1    wreg     unsigned char 
  1750 ;;  b               1    3[COMRAM] unsigned char 
  1751 ;; Auto vars:     Size  Location     Type
  1752 ;;  a               1    4[COMRAM] unsigned char 
  1753 ;;  temp            1    7[COMRAM] unsigned char 
  1754 ;;  y               1    6[COMRAM] unsigned char 
  1755 ;;  z               1    5[COMRAM] unsigned char 
  1756 ;; Return value:  Size  Location     Type
  1757 ;;                  1    wreg      void 
  1758 ;; Registers used:
  1759 ;;		wreg, status,2, status,0, cstack
  1760 ;; Tracked objects:
  1761 ;;		On entry : 0/0
  1762 ;;		On exit  : 0/0
  1763 ;;		Unchanged: 0/0
  1764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1765 ;;      Params:         1       0       0       0       0       0       0       0       0
  1766 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1767 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1768 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1769 ;;Total ram usage:        5 bytes
  1770 ;; Hardware stack levels used:    1
  1771 ;; Hardware stack levels required when called:    2
  1772 ;; This function calls:
  1773 ;;		_Lcd_Cmd
  1774 ;; This function is called by:
  1775 ;;		_Validacion_Contra
  1776 ;;		_main
  1777 ;; This function uses a non-reentrant model
  1778 ;;
  1779                           
  1780                           	psect	text9
  1781  000E86                     __ptext9:
  1782                           	callstack 0
  1783  000E86                     _Lcd_Set_Cursor:
  1784                           	callstack 26
  1785                           
  1786                           ;incstack = 0
  1787                           ;Lcd_Set_Cursor@a stored from wreg
  1788  000E86  6E05               	movwf	Lcd_Set_Cursor@a^0,c
  1789  000E88                     
  1790                           ;./lcd.h: 41: void Lcd_Set_Cursor(char a, char b);./lcd.h: 42: {;./lcd.h: 43:  char temp
      +                          ,z,y;;./lcd.h: 44:  if(a == 1)
  1791  000E88  0405               	decf	Lcd_Set_Cursor@a^0,w,c
  1792  000E8A  A4D8               	btfss	status,2,c
  1793  000E8C  EF4A  F007         	goto	u591
  1794  000E90  EF4C  F007         	goto	u590
  1795  000E94                     u591:
  1796  000E94  EF5D  F007         	goto	l1394
  1797  000E98                     u590:
  1798  000E98                     
  1799                           ;./lcd.h: 45:  {;./lcd.h: 46:    temp = 0x80 + b - 1;
  1800  000E98  5004               	movf	Lcd_Set_Cursor@b^0,w,c
  1801  000E9A  0F7F               	addlw	127
  1802  000E9C  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
  1803                           
  1804                           ;./lcd.h: 47:   z = temp>>4;
  1805  000E9E  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
  1806  000EA0  0B0F               	andlw	15
  1807  000EA2  6E06               	movwf	Lcd_Set_Cursor@z^0,c
  1808                           
  1809                           ;./lcd.h: 48:   y = temp & 0x0F;
  1810  000EA4  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
  1811  000EA6  0B0F               	andlw	15
  1812  000EA8  6E07               	movwf	Lcd_Set_Cursor@y^0,c
  1813  000EAA                     
  1814                           ;./lcd.h: 49:   Lcd_Cmd(z);
  1815  000EAA  5006               	movf	Lcd_Set_Cursor@z^0,w,c
  1816  000EAC  ECBC  F008         	call	_Lcd_Cmd
  1817  000EB0                     
  1818                           ;./lcd.h: 50:   Lcd_Cmd(y);
  1819  000EB0  5007               	movf	Lcd_Set_Cursor@y^0,w,c
  1820  000EB2  ECBC  F008         	call	_Lcd_Cmd
  1821                           
  1822                           ;./lcd.h: 51:  }
  1823  000EB6  EF75  F007         	goto	l63
  1824  000EBA                     l1394:
  1825  000EBA  0E02               	movlw	2
  1826  000EBC  1805               	xorwf	Lcd_Set_Cursor@a^0,w,c
  1827  000EBE  A4D8               	btfss	status,2,c
  1828  000EC0  EF64  F007         	goto	u601
  1829  000EC4  EF66  F007         	goto	u600
  1830  000EC8                     u601:
  1831  000EC8  EF75  F007         	goto	l63
  1832  000ECC                     u600:
  1833  000ECC                     
  1834                           ;./lcd.h: 53:  {;./lcd.h: 54:   temp = 0xC0 + b - 1;
  1835  000ECC  5004               	movf	Lcd_Set_Cursor@b^0,w,c
  1836  000ECE  0FBF               	addlw	191
  1837  000ED0  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
  1838                           
  1839                           ;./lcd.h: 55:   z = temp>>4;
  1840  000ED2  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
  1841  000ED4  0B0F               	andlw	15
  1842  000ED6  6E06               	movwf	Lcd_Set_Cursor@z^0,c
  1843                           
  1844                           ;./lcd.h: 56:   y = temp & 0x0F;
  1845  000ED8  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
  1846  000EDA  0B0F               	andlw	15
  1847  000EDC  6E07               	movwf	Lcd_Set_Cursor@y^0,c
  1848  000EDE                     
  1849                           ;./lcd.h: 57:   Lcd_Cmd(z);
  1850  000EDE  5006               	movf	Lcd_Set_Cursor@z^0,w,c
  1851  000EE0  ECBC  F008         	call	_Lcd_Cmd
  1852  000EE4                     
  1853                           ;./lcd.h: 58:   Lcd_Cmd(y);
  1854  000EE4  5007               	movf	Lcd_Set_Cursor@y^0,w,c
  1855  000EE6  ECBC  F008         	call	_Lcd_Cmd
  1856  000EEA                     l63:
  1857  000EEA  0012               	return		;funcret
  1858  000EEC                     __end_of_Lcd_Set_Cursor:
  1859                           	callstack 0
  1860                           
  1861 ;; *************** function _Keypad_Key_Press *****************
  1862 ;; Defined at:
  1863 ;;		line 67 in file "led.c"
  1864 ;; Parameters:    Size  Location     Type
  1865 ;;		None
  1866 ;; Auto vars:     Size  Location     Type
  1867 ;;  keypad         17    0[COMRAM] const unsigned char [17]
  1868 ;;  fila            2   19[COMRAM] unsigned int 
  1869 ;;  tecla           2   17[COMRAM] unsigned int 
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  1    wreg      unsigned char 
  1872 ;; Registers used:
  1873 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1879 ;;      Params:         0       0       0       0       0       0       0       0       0
  1880 ;;      Locals:        21       0       0       0       0       0       0       0       0
  1881 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1882 ;;      Totals:        21       0       0       0       0       0       0       0       0
  1883 ;;Total ram usage:       21 bytes
  1884 ;; Hardware stack levels used:    1
  1885 ;; This function calls:
  1886 ;;		Nothing
  1887 ;; This function is called by:
  1888 ;;		_Validacion_Contra
  1889 ;; This function uses a non-reentrant model
  1890 ;;
  1891                           
  1892                           	psect	text10
  1893  000D60                     __ptext10:
  1894                           	callstack 0
  1895  000D60                     _Keypad_Key_Press:
  1896                           	callstack 28
  1897  000D60                     
  1898                           ;led.c: 68:     const unsigned char keypad[17] = {'7', '8', '9', '/', '4', '5', '6', '*'
      +                          , '1', '2', '3', '-', 13, '0', '=', '+', 0};
  1899  000D60  0E01               	movlw	low Keypad_Key_Press@F3594
  1900  000D62  6EF6               	movwf	tblptrl,c
  1901  000D64                     	if	1	;There is more than 1 active tblptr byte
  1902  000D64  0E08               	movlw	high Keypad_Key_Press@F3594
  1903  000D66  6EF7               	movwf	tblptrh,c
  1904  000D68                     	endif
  1905  000D68                     	if	0	;There are less than 3 active tblptr bytes
  1906  000D68                     	endif
  1907  000D68  EE20  F001         	lfsr	2,Keypad_Key_Press@keypad
  1908  000D6C  0E10               	movlw	16
  1909  000D6E                     u620:
  1910  000D6E  0009               	tblrd		*+
  1911  000D70  CFF5 FFDE          	movff	tablat,postinc2
  1912  000D74  06E8               	decf	wreg,f,c
  1913  000D76  E2FB               	bc	u620
  1914  000D78                     
  1915                           ;led.c: 69:     unsigned int tecla = 0, fila;
  1916  000D78  0E00               	movlw	0
  1917  000D7A  6E13               	movwf	(Keypad_Key_Press@tecla+1)^0,c
  1918  000D7C  0E00               	movlw	0
  1919  000D7E  6E12               	movwf	Keypad_Key_Press@tecla^0,c
  1920  000D80                     
  1921                           ;led.c: 71:     for (fila = 0b00000001; fila < 0b00010000; fila <<= 1) {
  1922  000D80  0E00               	movlw	0
  1923  000D82  6E15               	movwf	(Keypad_Key_Press@fila+1)^0,c
  1924  000D84  0E01               	movlw	1
  1925  000D86  6E14               	movwf	Keypad_Key_Press@fila^0,c
  1926  000D88                     l1420:
  1927                           
  1928                           ;led.c: 72:         LATD = fila << 4;
  1929  000D88  3814               	swapf	Keypad_Key_Press@fila^0,w,c
  1930  000D8A  0BF0               	andlw	240
  1931  000D8C  6E8C               	movwf	140,c	;volatile
  1932  000D8E                     
  1933                           ;led.c: 73:         if (PORTDbits.RD0 == 1) break;
  1934  000D8E  A083               	btfss	131,0,c	;volatile
  1935  000D90  EFCC  F006         	goto	u631
  1936  000D94  EFCE  F006         	goto	u630
  1937  000D98                     u631:
  1938  000D98  EFD0  F006         	goto	l1426
  1939  000D9C                     u630:
  1940  000D9C  EF01  F007         	goto	l1448
  1941  000DA0                     l1426:
  1942                           
  1943                           ;led.c: 74:         tecla++;
  1944  000DA0  4A12               	infsnz	Keypad_Key_Press@tecla^0,f,c
  1945  000DA2  2A13               	incf	(Keypad_Key_Press@tecla+1)^0,f,c
  1946  000DA4                     
  1947                           ;led.c: 75:         if (PORTDbits.RD1 == 1) break;
  1948  000DA4  A283               	btfss	131,1,c	;volatile
  1949  000DA6  EFD7  F006         	goto	u641
  1950  000DAA  EFD9  F006         	goto	u640
  1951  000DAE                     u641:
  1952  000DAE  EFDB  F006         	goto	l1432
  1953  000DB2                     u640:
  1954  000DB2  EF01  F007         	goto	l1448
  1955  000DB6                     l1432:
  1956                           
  1957                           ;led.c: 76:         tecla++;
  1958  000DB6  4A12               	infsnz	Keypad_Key_Press@tecla^0,f,c
  1959  000DB8  2A13               	incf	(Keypad_Key_Press@tecla+1)^0,f,c
  1960  000DBA                     
  1961                           ;led.c: 77:         if (PORTDbits.RD2 == 1) break;
  1962  000DBA  A483               	btfss	131,2,c	;volatile
  1963  000DBC  EFE2  F006         	goto	u651
  1964  000DC0  EFE4  F006         	goto	u650
  1965  000DC4                     u651:
  1966  000DC4  EFE6  F006         	goto	l1438
  1967  000DC8                     u650:
  1968  000DC8  EF01  F007         	goto	l1448
  1969  000DCC                     l1438:
  1970                           
  1971                           ;led.c: 78:         tecla++;
  1972  000DCC  4A12               	infsnz	Keypad_Key_Press@tecla^0,f,c
  1973  000DCE  2A13               	incf	(Keypad_Key_Press@tecla+1)^0,f,c
  1974  000DD0                     
  1975                           ;led.c: 79:         if (PORTDbits.RD3 == 1) break;
  1976  000DD0  A683               	btfss	131,3,c	;volatile
  1977  000DD2  EFED  F006         	goto	u661
  1978  000DD6  EFEF  F006         	goto	u660
  1979  000DDA                     u661:
  1980  000DDA  EFF1  F006         	goto	l1444
  1981  000DDE                     u660:
  1982  000DDE  EF01  F007         	goto	l1448
  1983  000DE2                     l1444:
  1984                           
  1985                           ;led.c: 80:         tecla++;
  1986  000DE2  4A12               	infsnz	Keypad_Key_Press@tecla^0,f,c
  1987  000DE4  2A13               	incf	(Keypad_Key_Press@tecla+1)^0,f,c
  1988                           
  1989                           ;led.c: 81:     }
  1990  000DE6  90D8               	bcf	status,0,c
  1991  000DE8  3614               	rlcf	Keypad_Key_Press@fila^0,f,c
  1992  000DEA  3615               	rlcf	(Keypad_Key_Press@fila+1)^0,f,c
  1993  000DEC  5015               	movf	(Keypad_Key_Press@fila+1)^0,w,c
  1994  000DEE  E109               	bnz	u670
  1995  000DF0  0E10               	movlw	16
  1996  000DF2  5C14               	subwf	Keypad_Key_Press@fila^0,w,c
  1997  000DF4  A0D8               	btfss	status,0,c
  1998  000DF6  EFFF  F006         	goto	u671
  1999  000DFA  EF01  F007         	goto	u670
  2000  000DFE                     u671:
  2001  000DFE  EFC4  F006         	goto	l1420
  2002  000E02                     u670:
  2003  000E02                     l1448:
  2004                           
  2005                           ;led.c: 82:     PORTD = 0x00;
  2006  000E02  0E00               	movlw	0
  2007  000E04  6E83               	movwf	131,c	;volatile
  2008  000E06                     
  2009                           ;led.c: 83:     return keypad[tecla];
  2010  000E06  0E01               	movlw	low Keypad_Key_Press@keypad
  2011  000E08  2412               	addwf	Keypad_Key_Press@tecla^0,w,c
  2012  000E0A  6ED9               	movwf	fsr2l,c
  2013  000E0C  0E00               	movlw	high Keypad_Key_Press@keypad
  2014  000E0E  2013               	addwfc	(Keypad_Key_Press@tecla+1)^0,w,c
  2015  000E10  6EDA               	movwf	fsr2h,c
  2016  000E12  50DF               	movf	indf2,w,c
  2017  000E14  0012               	return		;funcret
  2018  000E16                     __end_of_Keypad_Key_Press:
  2019                           	callstack 0
  2020                           
  2021 ;; *************** function _ContadorCarros *****************
  2022 ;; Defined at:
  2023 ;;		line 86 in file "led.c"
  2024 ;; Parameters:    Size  Location     Type
  2025 ;;		None
  2026 ;; Auto vars:     Size  Location     Type
  2027 ;;		None
  2028 ;; Return value:  Size  Location     Type
  2029 ;;                  2  119[None  ] int 
  2030 ;; Registers used:
  2031 ;;		wreg, status,2, status,0
  2032 ;; Tracked objects:
  2033 ;;		On entry : 0/0
  2034 ;;		On exit  : 0/0
  2035 ;;		Unchanged: 0/0
  2036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2037 ;;      Params:         0       0       0       0       0       0       0       0       0
  2038 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2039 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2040 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2041 ;;Total ram usage:        0 bytes
  2042 ;; Hardware stack levels used:    1
  2043 ;; This function calls:
  2044 ;;		Nothing
  2045 ;; This function is called by:
  2046 ;;		_Validacion_Contra
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           	psect	text11
  2051  000FF0                     __ptext11:
  2052                           	callstack 0
  2053  000FF0                     _ContadorCarros:
  2054                           	callstack 28
  2055  000FF0                     
  2056                           ;led.c: 89:     INTCONbits.GIE = 0;
  2057  000FF0  9EF2               	bcf	242,7,c	;volatile
  2058                           
  2059                           ;led.c: 90:     T0CONbits.T0CS = 1;
  2060  000FF2  8AD5               	bsf	213,5,c	;volatile
  2061                           
  2062                           ;led.c: 91:     T0CONbits.T0SE = 1;
  2063  000FF4  88D5               	bsf	213,4,c	;volatile
  2064                           
  2065                           ;led.c: 92:     T0CONbits.T08BIT = 1;
  2066  000FF6  8CD5               	bsf	213,6,c	;volatile
  2067                           
  2068                           ;led.c: 93:     T0CONbits.TMR0ON = 1;
  2069  000FF8  8ED5               	bsf	213,7,c	;volatile
  2070  000FFA                     
  2071                           ;led.c: 94:     TMR0L = 0;
  2072  000FFA  0E00               	movlw	0
  2073  000FFC  6ED6               	movwf	214,c	;volatile
  2074                           
  2075                           ;led.c: 95:     TRISC = 0x00;
  2076  000FFE  0E00               	movlw	0
  2077  001000  6E94               	movwf	148,c	;volatile
  2078                           
  2079                           ;led.c: 96:     LATC = 0x00;
  2080  001002  0E00               	movlw	0
  2081  001004  6E8B               	movwf	139,c	;volatile
  2082  001006                     
  2083                           ;led.c: 98:     if (TRISAbits.RA4 == 1) {
  2084  001006  A892               	btfss	146,4,c	;volatile
  2085  001008  EF08  F008         	goto	u681
  2086  00100C  EF0A  F008         	goto	u680
  2087  001010                     u681:
  2088  001010  EF1C  F008         	goto	l125
  2089  001014                     u680:
  2090  001014                     l1460:
  2091                           
  2092                           ;led.c: 100:             if (TMR0L == 10) {
  2093  001014  0E0A               	movlw	10
  2094  001016  18D6               	xorwf	214,w,c	;volatile
  2095  001018  A4D8               	btfss	status,2,c
  2096  00101A  EF11  F008         	goto	u691
  2097  00101E  EF13  F008         	goto	u690
  2098  001022                     u691:
  2099  001022  EF15  F008         	goto	l122
  2100  001026                     u690:
  2101  001026                     
  2102                           ;led.c: 101:                 TMR0L = MYcount;
  2103  001026  C02F  FFD6         	movff	_MYcount,4054	;volatile
  2104  00102A                     l122:
  2105                           
  2106                           ;led.c: 103:             MYcount = TMR0L;
  2107  00102A  CFD6 F02F          	movff	4054,_MYcount	;volatile
  2108  00102E                     
  2109                           ;led.c: 104:             LATC = (1 << 5) | MYcount;
  2110  00102E  502F               	movf	_MYcount^0,w,c
  2111  001030  0920               	iorlw	32
  2112  001032  6E8B               	movwf	139,c	;volatile
  2113  001034  EF0A  F008         	goto	l1460
  2114  001038                     l125:
  2115  001038  0012               	return		;funcret
  2116  00103A                     __end_of_ContadorCarros:
  2117                           	callstack 0
  2118                           
  2119 ;; *************** function _Lcd_Init *****************
  2120 ;; Defined at:
  2121 ;;		line 62 in file "./lcd.h"
  2122 ;; Parameters:    Size  Location     Type
  2123 ;;		None
  2124 ;; Auto vars:     Size  Location     Type
  2125 ;;		None
  2126 ;; Return value:  Size  Location     Type
  2127 ;;                  1    wreg      void 
  2128 ;; Registers used:
  2129 ;;		wreg, status,2, cstack
  2130 ;; Tracked objects:
  2131 ;;		On entry : 0/0
  2132 ;;		On exit  : 0/0
  2133 ;;		Unchanged: 0/0
  2134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2135 ;;      Params:         0       0       0       0       0       0       0       0       0
  2136 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2137 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2138 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2139 ;;Total ram usage:        1 bytes
  2140 ;; Hardware stack levels used:    1
  2141 ;; Hardware stack levels required when called:    2
  2142 ;; This function calls:
  2143 ;;		_Lcd_Cmd
  2144 ;;		_Lcd_Port
  2145 ;; This function is called by:
  2146 ;;		_main
  2147 ;; This function uses a non-reentrant model
  2148 ;;
  2149                           
  2150                           	psect	text12
  2151  000E16                     __ptext12:
  2152                           	callstack 0
  2153  000E16                     _Lcd_Init:
  2154                           	callstack 28
  2155  000E16                     
  2156                           ;./lcd.h: 64:   Lcd_Port(0x00);
  2157  000E16  0E00               	movlw	0
  2158  000E18  EC76  F007         	call	_Lcd_Port
  2159  000E1C                     
  2160                           ;./lcd.h: 65:    _delay((unsigned long)((20)*(8000000/4000.0)));
  2161  000E1C  0E34               	movlw	52
  2162  000E1E  6E04               	movwf	??_Lcd_Init^0,c
  2163  000E20  0EF2               	movlw	242
  2164  000E22                     u1067:
  2165  000E22  2EE8               	decfsz	wreg,f,c
  2166  000E24  D7FE               	bra	u1067
  2167  000E26  2E04               	decfsz	??_Lcd_Init^0,f,c
  2168  000E28  D7FC               	bra	u1067
  2169  000E2A                     
  2170                           ;./lcd.h: 66:   Lcd_Cmd(0x03);
  2171  000E2A  0E03               	movlw	3
  2172  000E2C  ECBC  F008         	call	_Lcd_Cmd
  2173  000E30                     
  2174                           ;./lcd.h: 67:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2175  000E30  0E0D               	movlw	13
  2176  000E32  6E04               	movwf	??_Lcd_Init^0,c
  2177  000E34  0EFC               	movlw	252
  2178  000E36                     u1077:
  2179  000E36  2EE8               	decfsz	wreg,f,c
  2180  000E38  D7FE               	bra	u1077
  2181  000E3A  2E04               	decfsz	??_Lcd_Init^0,f,c
  2182  000E3C  D7FC               	bra	u1077
  2183  000E3E                     
  2184                           ;./lcd.h: 68:   Lcd_Cmd(0x03);
  2185  000E3E  0E03               	movlw	3
  2186  000E40  ECBC  F008         	call	_Lcd_Cmd
  2187  000E44                     
  2188                           ;./lcd.h: 69:  _delay((unsigned long)((11)*(8000000/4000.0)));
  2189  000E44  0E1D               	movlw	29
  2190  000E46  6E04               	movwf	??_Lcd_Init^0,c
  2191  000E48  0E91               	movlw	145
  2192  000E4A                     u1087:
  2193  000E4A  2EE8               	decfsz	wreg,f,c
  2194  000E4C  D7FE               	bra	u1087
  2195  000E4E  2E04               	decfsz	??_Lcd_Init^0,f,c
  2196  000E50  D7FC               	bra	u1087
  2197  000E52  F000               	nop	
  2198  000E54                     
  2199                           ;./lcd.h: 70:   Lcd_Cmd(0x03);
  2200  000E54  0E03               	movlw	3
  2201  000E56  ECBC  F008         	call	_Lcd_Cmd
  2202  000E5A                     
  2203                           ;./lcd.h: 72:   Lcd_Cmd(0x02);
  2204  000E5A  0E02               	movlw	2
  2205  000E5C  ECBC  F008         	call	_Lcd_Cmd
  2206  000E60                     
  2207                           ;./lcd.h: 73:   Lcd_Cmd(0x02);
  2208  000E60  0E02               	movlw	2
  2209  000E62  ECBC  F008         	call	_Lcd_Cmd
  2210  000E66                     
  2211                           ;./lcd.h: 74:   Lcd_Cmd(0x08);
  2212  000E66  0E08               	movlw	8
  2213  000E68  ECBC  F008         	call	_Lcd_Cmd
  2214  000E6C                     
  2215                           ;./lcd.h: 75:   Lcd_Cmd(0x00);
  2216  000E6C  0E00               	movlw	0
  2217  000E6E  ECBC  F008         	call	_Lcd_Cmd
  2218  000E72                     
  2219                           ;./lcd.h: 76:   Lcd_Cmd(0x0C);
  2220  000E72  0E0C               	movlw	12
  2221  000E74  ECBC  F008         	call	_Lcd_Cmd
  2222  000E78                     
  2223                           ;./lcd.h: 77:   Lcd_Cmd(0x00);
  2224  000E78  0E00               	movlw	0
  2225  000E7A  ECBC  F008         	call	_Lcd_Cmd
  2226  000E7E                     
  2227                           ;./lcd.h: 78:   Lcd_Cmd(0x06);
  2228  000E7E  0E06               	movlw	6
  2229  000E80  ECBC  F008         	call	_Lcd_Cmd
  2230  000E84  0012               	return		;funcret
  2231  000E86                     __end_of_Lcd_Init:
  2232                           	callstack 0
  2233                           
  2234 ;; *************** function _Lcd_Clear *****************
  2235 ;; Defined at:
  2236 ;;		line 35 in file "./lcd.h"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;		None
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;		None
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  2   56[None  ] int 
  2243 ;; Registers used:
  2244 ;;		wreg, status,2, cstack
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2250 ;;      Params:         0       0       0       0       0       0       0       0       0
  2251 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2252 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2253 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2254 ;;Total ram usage:        0 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; Hardware stack levels required when called:    2
  2257 ;; This function calls:
  2258 ;;		_Lcd_Cmd
  2259 ;; This function is called by:
  2260 ;;		_main
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           	psect	text13
  2265  001198                     __ptext13:
  2266                           	callstack 0
  2267  001198                     _Lcd_Clear:
  2268                           	callstack 28
  2269  001198                     
  2270                           ;./lcd.h: 37:  Lcd_Cmd(0);
  2271  001198  0E00               	movlw	0
  2272  00119A  ECBC  F008         	call	_Lcd_Cmd
  2273                           
  2274                           ;./lcd.h: 38:  Lcd_Cmd(1);
  2275  00119E  0E01               	movlw	1
  2276  0011A0  ECBC  F008         	call	_Lcd_Cmd
  2277  0011A4  0012               	return		;funcret
  2278  0011A6                     __end_of_Lcd_Clear:
  2279                           	callstack 0
  2280                           
  2281 ;; *************** function _Lcd_Cmd *****************
  2282 ;; Defined at:
  2283 ;;		line 26 in file "./lcd.h"
  2284 ;; Parameters:    Size  Location     Type
  2285 ;;  a               1    wreg     unsigned char 
  2286 ;; Auto vars:     Size  Location     Type
  2287 ;;  a               1    2[COMRAM] unsigned char 
  2288 ;; Return value:  Size  Location     Type
  2289 ;;                  1    wreg      void 
  2290 ;; Registers used:
  2291 ;;		wreg, status,2, cstack
  2292 ;; Tracked objects:
  2293 ;;		On entry : 0/0
  2294 ;;		On exit  : 0/0
  2295 ;;		Unchanged: 0/0
  2296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2297 ;;      Params:         0       0       0       0       0       0       0       0       0
  2298 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2299 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2300 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2301 ;;Total ram usage:        2 bytes
  2302 ;; Hardware stack levels used:    1
  2303 ;; Hardware stack levels required when called:    1
  2304 ;; This function calls:
  2305 ;;		_Lcd_Port
  2306 ;; This function is called by:
  2307 ;;		_Lcd_Clear
  2308 ;;		_Lcd_Set_Cursor
  2309 ;;		_Lcd_Init
  2310 ;;		_Lcd_Shift_Right
  2311 ;;		_Lcd_Shift_Left
  2312 ;; This function uses a non-reentrant model
  2313 ;;
  2314                           
  2315                           	psect	text14
  2316  001178                     __ptext14:
  2317                           	callstack 0
  2318  001178                     _Lcd_Cmd:
  2319                           	callstack 26
  2320                           
  2321                           ;incstack = 0
  2322                           ;Lcd_Cmd@a stored from wreg
  2323  001178  6E03               	movwf	Lcd_Cmd@a^0,c
  2324  00117A                     
  2325                           ;./lcd.h: 26: void Lcd_Cmd(char a);./lcd.h: 27: {;./lcd.h: 28:  PORTBbits.RB7 = 0;
  2326  00117A  9E81               	bcf	129,7,c	;volatile
  2327  00117C                     
  2328                           ;./lcd.h: 29:  Lcd_Port(a);
  2329  00117C  5003               	movf	Lcd_Cmd@a^0,w,c
  2330  00117E  EC76  F007         	call	_Lcd_Port
  2331  001182                     
  2332                           ;./lcd.h: 30:  PORTBbits.RB6 = 1;
  2333  001182  8C81               	bsf	129,6,c	;volatile
  2334  001184                     
  2335                           ;./lcd.h: 31:         _delay((unsigned long)((4)*(8000000/4000.0)));
  2336  001184  0E0B               	movlw	11
  2337  001186  6E02               	movwf	??_Lcd_Cmd^0,c
  2338  001188  0E62               	movlw	98
  2339  00118A                     u1097:
  2340  00118A  2EE8               	decfsz	wreg,f,c
  2341  00118C  D7FE               	bra	u1097
  2342  00118E  2E02               	decfsz	??_Lcd_Cmd^0,f,c
  2343  001190  D7FC               	bra	u1097
  2344  001192  D000               	nop2	
  2345  001194                     
  2346                           ;./lcd.h: 32:         PORTBbits.RB6 = 0;
  2347  001194  9C81               	bcf	129,6,c	;volatile
  2348  001196  0012               	return		;funcret
  2349  001198                     __end_of_Lcd_Cmd:
  2350                           	callstack 0
  2351                           
  2352 ;; *************** function _Lcd_Port *****************
  2353 ;; Defined at:
  2354 ;;		line 4 in file "./lcd.h"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;  a               1    wreg     unsigned char 
  2357 ;; Auto vars:     Size  Location     Type
  2358 ;;  a               1    0[COMRAM] unsigned char 
  2359 ;; Return value:  Size  Location     Type
  2360 ;;                  1    wreg      void 
  2361 ;; Registers used:
  2362 ;;		wreg
  2363 ;; Tracked objects:
  2364 ;;		On entry : 0/0
  2365 ;;		On exit  : 0/0
  2366 ;;		Unchanged: 0/0
  2367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2368 ;;      Params:         0       0       0       0       0       0       0       0       0
  2369 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2370 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2371 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2372 ;;Total ram usage:        1 bytes
  2373 ;; Hardware stack levels used:    1
  2374 ;; This function calls:
  2375 ;;		Nothing
  2376 ;; This function is called by:
  2377 ;;		_Lcd_Cmd
  2378 ;;		_Lcd_Init
  2379 ;;		_Lcd_Write_Char
  2380 ;; This function uses a non-reentrant model
  2381 ;;
  2382                           
  2383                           	psect	text15
  2384  000EEC                     __ptext15:
  2385                           	callstack 0
  2386  000EEC                     _Lcd_Port:
  2387                           	callstack 26
  2388                           
  2389                           ;incstack = 0
  2390                           ;Lcd_Port@a stored from wreg
  2391  000EEC  6E01               	movwf	Lcd_Port@a^0,c
  2392  000EEE                     
  2393                           ;./lcd.h: 4: void Lcd_Port(char a);./lcd.h: 5: {;./lcd.h: 6:  if(a & 1)
  2394  000EEE  A001               	btfss	Lcd_Port@a^0,0,c
  2395  000EF0  EF7C  F007         	goto	u511
  2396  000EF4  EF7E  F007         	goto	u510
  2397  000EF8                     u511:
  2398  000EF8  EF81  F007         	goto	l43
  2399  000EFC                     u510:
  2400  000EFC                     
  2401                           ;./lcd.h: 7:   PORTBbits.RB5 = 1;
  2402  000EFC  8A81               	bsf	129,5,c	;volatile
  2403  000EFE  EF82  F007         	goto	l1322
  2404  000F02                     l43:
  2405                           
  2406                           ;./lcd.h: 9:   PORTBbits.RB5 = 0;
  2407  000F02  9A81               	bcf	129,5,c	;volatile
  2408  000F04                     l1322:
  2409                           
  2410                           ;./lcd.h: 11:  if(a & 2)
  2411  000F04  A201               	btfss	Lcd_Port@a^0,1,c
  2412  000F06  EF87  F007         	goto	u521
  2413  000F0A  EF89  F007         	goto	u520
  2414  000F0E                     u521:
  2415  000F0E  EF8C  F007         	goto	l45
  2416  000F12                     u520:
  2417  000F12                     
  2418                           ;./lcd.h: 12:   PORTBbits.RB4 = 1;
  2419  000F12  8881               	bsf	129,4,c	;volatile
  2420  000F14  EF8D  F007         	goto	l1326
  2421  000F18                     l45:
  2422                           
  2423                           ;./lcd.h: 14:   PORTBbits.RB4 = 0;
  2424  000F18  9881               	bcf	129,4,c	;volatile
  2425  000F1A                     l1326:
  2426                           
  2427                           ;./lcd.h: 16:  if(a & 4)
  2428  000F1A  A401               	btfss	Lcd_Port@a^0,2,c
  2429  000F1C  EF92  F007         	goto	u531
  2430  000F20  EF94  F007         	goto	u530
  2431  000F24                     u531:
  2432  000F24  EF97  F007         	goto	l47
  2433  000F28                     u530:
  2434  000F28                     
  2435                           ;./lcd.h: 17:   PORTBbits.RB3 = 1;
  2436  000F28  8681               	bsf	129,3,c	;volatile
  2437  000F2A  EF98  F007         	goto	l1330
  2438  000F2E                     l47:
  2439                           
  2440                           ;./lcd.h: 19:   PORTBbits.RB3 = 0;
  2441  000F2E  9681               	bcf	129,3,c	;volatile
  2442  000F30                     l1330:
  2443                           
  2444                           ;./lcd.h: 21:  if(a & 8)
  2445  000F30  A601               	btfss	Lcd_Port@a^0,3,c
  2446  000F32  EF9D  F007         	goto	u541
  2447  000F36  EF9F  F007         	goto	u540
  2448  000F3A                     u541:
  2449  000F3A  EFA2  F007         	goto	l49
  2450  000F3E                     u540:
  2451  000F3E                     
  2452                           ;./lcd.h: 22:   PORTBbits.RB2 = 1;
  2453  000F3E  8481               	bsf	129,2,c	;volatile
  2454  000F40  EFA3  F007         	goto	l51
  2455  000F44                     l49:
  2456                           
  2457                           ;./lcd.h: 24:   PORTBbits.RB2 = 0;
  2458  000F44  9481               	bcf	129,2,c	;volatile
  2459  000F46                     l51:
  2460  000F46  0012               	return		;funcret
  2461  000F48                     __end_of_Lcd_Port:
  2462                           	callstack 0
  2463                           
  2464 ;; *************** function _Keypad_Init *****************
  2465 ;; Defined at:
  2466 ;;		line 62 in file "led.c"
  2467 ;; Parameters:    Size  Location     Type
  2468 ;;		None
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;		None
  2471 ;; Return value:  Size  Location     Type
  2472 ;;                  1    wreg      void 
  2473 ;; Registers used:
  2474 ;;		wreg, status,2
  2475 ;; Tracked objects:
  2476 ;;		On entry : 0/0
  2477 ;;		On exit  : 0/0
  2478 ;;		Unchanged: 0/0
  2479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2480 ;;      Params:         0       0       0       0       0       0       0       0       0
  2481 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2482 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2483 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2484 ;;Total ram usage:        0 bytes
  2485 ;; Hardware stack levels used:    1
  2486 ;; This function calls:
  2487 ;;		Nothing
  2488 ;; This function is called by:
  2489 ;;		_main
  2490 ;; This function uses a non-reentrant model
  2491 ;;
  2492                           
  2493                           	psect	text16
  2494  0011AE                     __ptext16:
  2495                           	callstack 0
  2496  0011AE                     _Keypad_Init:
  2497                           	callstack 30
  2498  0011AE                     
  2499                           ;led.c: 63:     TRISD = 0B00001111;
  2500  0011AE  0E0F               	movlw	15
  2501  0011B0  6E95               	movwf	149,c	;volatile
  2502  0011B2  0012               	return		;funcret
  2503  0011B4                     __end_of_Keypad_Init:
  2504                           	callstack 0
  2505                           
  2506                           	psect	rparam
  2507  0000                     
  2508                           	psect	idloc
  2509                           
  2510                           ;Config register IDLOC0 @ 0x200000
  2511                           ;	unspecified, using default values
  2512  200000                     	org	2097152
  2513  200000  FF                 	db	255
  2514                           
  2515                           ;Config register IDLOC1 @ 0x200001
  2516                           ;	unspecified, using default values
  2517  200001                     	org	2097153
  2518  200001  FF                 	db	255
  2519                           
  2520                           ;Config register IDLOC2 @ 0x200002
  2521                           ;	unspecified, using default values
  2522  200002                     	org	2097154
  2523  200002  FF                 	db	255
  2524                           
  2525                           ;Config register IDLOC3 @ 0x200003
  2526                           ;	unspecified, using default values
  2527  200003                     	org	2097155
  2528  200003  FF                 	db	255
  2529                           
  2530                           ;Config register IDLOC4 @ 0x200004
  2531                           ;	unspecified, using default values
  2532  200004                     	org	2097156
  2533  200004  FF                 	db	255
  2534                           
  2535                           ;Config register IDLOC5 @ 0x200005
  2536                           ;	unspecified, using default values
  2537  200005                     	org	2097157
  2538  200005  FF                 	db	255
  2539                           
  2540                           ;Config register IDLOC6 @ 0x200006
  2541                           ;	unspecified, using default values
  2542  200006                     	org	2097158
  2543  200006  FF                 	db	255
  2544                           
  2545                           ;Config register IDLOC7 @ 0x200007
  2546                           ;	unspecified, using default values
  2547  200007                     	org	2097159
  2548  200007  FF                 	db	255
  2549                           
  2550                           	psect	config
  2551                           
  2552                           ;Config register CONFIG1L @ 0x300000
  2553                           ;	unspecified, using default values
  2554                           ;	PLL Prescaler Selection bits
  2555                           ;	PLLDIV = 0x0, unprogrammed default
  2556                           ;	System Clock Postscaler Selection bits
  2557                           ;	CPUDIV = 0x0, unprogrammed default
  2558                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  2559                           ;	USBDIV = 0x0, unprogrammed default
  2560  300000                     	org	3145728
  2561  300000  00                 	db	0
  2562                           
  2563                           ;Config register CONFIG1H @ 0x300001
  2564                           ;	Oscillator Selection bits
  2565                           ;	FOSC = INTOSC_EC, Internal oscillator, CLKO function on RA6, EC used by USB (INTCKO)
  2566                           ;	Fail-Safe Clock Monitor Enable bit
  2567                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2568                           ;	Internal/External Oscillator Switchover bit
  2569                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2570  300001                     	org	3145729
  2571  300001  09                 	db	9
  2572                           
  2573                           ;Config register CONFIG2L @ 0x300002
  2574                           ;	Power-up Timer Enable bit
  2575                           ;	PWRT = OFF, PWRT disabled
  2576                           ;	Brown-out Reset Enable bits
  2577                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2578                           ;	Brown-out Reset Voltage bits
  2579                           ;	BORV = 3, Minimum setting 2.05V
  2580                           ;	USB Voltage Regulator Enable bit
  2581                           ;	VREGEN = OFF, USB voltage regulator disabled
  2582  300002                     	org	3145730
  2583  300002  1F                 	db	31
  2584                           
  2585                           ;Config register CONFIG2H @ 0x300003
  2586                           ;	Watchdog Timer Enable bit
  2587                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2588                           ;	Watchdog Timer Postscale Select bits
  2589                           ;	WDTPS = 32768, 1:32768
  2590  300003                     	org	3145731
  2591  300003  1E                 	db	30
  2592                           
  2593                           ; Padding undefined space
  2594  300004                     	org	3145732
  2595  300004  FF                 	db	255
  2596                           
  2597                           ;Config register CONFIG3H @ 0x300005
  2598                           ;	CCP2 MUX bit
  2599                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  2600                           ;	PORTB A/D Enable bit
  2601                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  2602                           ;	Low-Power Timer 1 Oscillator Enable bit
  2603                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2604                           ;	MCLR Pin Enable bit
  2605                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2606  300005                     	org	3145733
  2607  300005  81                 	db	129
  2608                           
  2609                           ;Config register CONFIG4L @ 0x300006
  2610                           ;	Stack Full/Underflow Reset Enable bit
  2611                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2612                           ;	Single-Supply ICSP Enable bit
  2613                           ;	LVP = OFF, Single-Supply ICSP disabled
  2614                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  2615                           ;	ICPRT = OFF, ICPORT disabled
  2616                           ;	Extended Instruction Set Enable bit
  2617                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2618                           ;	Background Debugger Enable bit
  2619                           ;	DEBUG = 0x1, unprogrammed default
  2620  300006                     	org	3145734
  2621  300006  81                 	db	129
  2622                           
  2623                           ; Padding undefined space
  2624  300007                     	org	3145735
  2625  300007  FF                 	db	255
  2626                           
  2627                           ;Config register CONFIG5L @ 0x300008
  2628                           ;	Code Protection bit
  2629                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  2630                           ;	Code Protection bit
  2631                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  2632                           ;	Code Protection bit
  2633                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  2634                           ;	Code Protection bit
  2635                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  2636  300008                     	org	3145736
  2637  300008  0F                 	db	15
  2638                           
  2639                           ;Config register CONFIG5H @ 0x300009
  2640                           ;	Boot Block Code Protection bit
  2641                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  2642                           ;	Data EEPROM Code Protection bit
  2643                           ;	CPD = OFF, Data EEPROM is not code-protected
  2644  300009                     	org	3145737
  2645  300009  C0                 	db	192
  2646                           
  2647                           ;Config register CONFIG6L @ 0x30000A
  2648                           ;	Write Protection bit
  2649                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  2650                           ;	Write Protection bit
  2651                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  2652                           ;	Write Protection bit
  2653                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  2654                           ;	Write Protection bit
  2655                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  2656  30000A                     	org	3145738
  2657  30000A  0F                 	db	15
  2658                           
  2659                           ;Config register CONFIG6H @ 0x30000B
  2660                           ;	Configuration Register Write Protection bit
  2661                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  2662                           ;	Boot Block Write Protection bit
  2663                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  2664                           ;	Data EEPROM Write Protection bit
  2665                           ;	WRTD = OFF, Data EEPROM is not write-protected
  2666  30000B                     	org	3145739
  2667  30000B  E0                 	db	224
  2668                           
  2669                           ;Config register CONFIG7L @ 0x30000C
  2670                           ;	Table Read Protection bit
  2671                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2672                           ;	Table Read Protection bit
  2673                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2674                           ;	Table Read Protection bit
  2675                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2676                           ;	Table Read Protection bit
  2677                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2678  30000C                     	org	3145740
  2679  30000C  0F                 	db	15
  2680                           
  2681                           ;Config register CONFIG7H @ 0x30000D
  2682                           ;	Boot Block Table Read Protection bit
  2683                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  2684  30000D                     	org	3145741
  2685  30000D  40                 	db	64
  2686                           tosu	equ	0xFFF
  2687                           tosh	equ	0xFFE
  2688                           tosl	equ	0xFFD
  2689                           stkptr	equ	0xFFC
  2690                           pclatu	equ	0xFFB
  2691                           pclath	equ	0xFFA
  2692                           pcl	equ	0xFF9
  2693                           tblptru	equ	0xFF8
  2694                           tblptrh	equ	0xFF7
  2695                           tblptrl	equ	0xFF6
  2696                           tablat	equ	0xFF5
  2697                           prodh	equ	0xFF4
  2698                           prodl	equ	0xFF3
  2699                           indf0	equ	0xFEF
  2700                           postinc0	equ	0xFEE
  2701                           postdec0	equ	0xFED
  2702                           preinc0	equ	0xFEC
  2703                           plusw0	equ	0xFEB
  2704                           fsr0h	equ	0xFEA
  2705                           fsr0l	equ	0xFE9
  2706                           wreg	equ	0xFE8
  2707                           indf1	equ	0xFE7
  2708                           postinc1	equ	0xFE6
  2709                           postdec1	equ	0xFE5
  2710                           preinc1	equ	0xFE4
  2711                           plusw1	equ	0xFE3
  2712                           fsr1h	equ	0xFE2
  2713                           fsr1l	equ	0xFE1
  2714                           bsr	equ	0xFE0
  2715                           indf2	equ	0xFDF
  2716                           postinc2	equ	0xFDE
  2717                           postdec2	equ	0xFDD
  2718                           preinc2	equ	0xFDC
  2719                           plusw2	equ	0xFDB
  2720                           fsr2h	equ	0xFDA
  2721                           fsr2l	equ	0xFD9
  2722                           status	equ	0xFD8

Data Sizes:
    Strings     61
    Constant    17
    Data        8
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     38      55
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 4
		 -> SelectContra(COMRAM[4]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> STR_5(CODE[13]), STR_4(CODE[17]), STR_3(CODE[15]), STR_2(CODE[16]), 
		 -> STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_RepetirOpcion
    _RepetirOpcion->_Validacion_Contra
    _Validacion_Contra->_atoi
    _atoi->_isspace
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6160
                        _Keypad_Init
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                      _RepetirOpcion
 ---------------------------------------------------------------------------------
 (1) _RepetirOpcion                                        2     0      2    4140
                                             36 COMRAM     2     0      2
                  _Validacion_Contra
 ---------------------------------------------------------------------------------
 (2) _Validacion_Contra                                   14    14      0    4041
                                             22 COMRAM    14    14      0
                     _ContadorCarros
                   _Keypad_Key_Press
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                               _atoi
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _atoi                                                15    13      2    1380
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (4) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              6     4      2     465
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_String                                     6     4      2     648
                                              4 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_Char                                       3     3      0     178
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Set_Cursor                                       5     4      1    1064
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Keypad_Key_Press                                    21    21      0     120
                                              0 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 (3) _ContadorCarros                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (4) _Lcd_Cmd                                              2     2      0     110
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (5) _Lcd_Port                                             1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Keypad_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Keypad_Init
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _RepetirOpcion
     _Validacion_Contra
       _ContadorCarros
       _Keypad_Key_Press
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Write_Char
         _Lcd_Port
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _atoi
         ___wmul
         _isdigit
         _isspace
       _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     26      37       1       57.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      37      20        0.0%
DATA                 0      0      37       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Dec 14 21:24:56 2020

                           l51 0F46                             l43 0F02                             l45 0F18  
                           l54 1196                             l47 0F2E                             l63 0EEA  
                           l49 0F44                             l57 11A4                             l66 0E84  
                           l75 0F9C                             l69 10E6            ___wmul@multiplicand 0003  
                          l106 11B2                            l122 102A                            l125 1038  
                          l117 0E14                            l160 0B00                            l163 0BD4  
                          l180 1176                            l169 1150                            l882 0D5E  
                          l885 10AE                            l893 0FEE                            l879 0D56  
                          u510 0EFC                            u511 0EF8                            u520 0F12  
                          u600 0ECC                            u521 0F0E                            u601 0EC8  
                          u530 0F28                            u610 0F9C                            u531 0F24  
                          u611 0F98                            u540 0F3E                            u620 0D6E  
                          u700 0C0C                            u541 0F3A                            u701 0C08  
                          u630 0D9C                            u550 10A8                            u710 0C40  
                          u631 0D98                            u551 10A2                            u711 0C3C  
                          u640 0DB2                            u560 10AA                            u720 0C5C  
                          u800 08B0                            u641 0DAE                            u721 0C58  
                          u801 08AC                            u650 0DC8                            u570 0FB6  
                          u730 0D10                            u810 090A                            u651 0DC4  
                          u571 0FB2                            u731 0D0A                            u811 0906  
                          u660 0DDE                            u580 0FE4                            u740 0D12  
                          u900 0A1C                            u820 0938                            u661 0DDA  
                          u581 0FE0                            u901 0A16                            u821 0932  
                          u670 0E02                            u590 0E98                            u750 0D28  
                          u910 0A1E                            u830 093A                            u671 0DFE  
                          u591 0E94                            u751 0D24                            u680 1014  
                          u760 0D3A                            u920 0A34                            u840 0950  
                          u681 1010                            u761 0D36                            u921 0A30  
                          u841 094C                            u690 1026                            u930 0A60  
                          u850 097C                            u770 086A                            u691 1022  
                          u931 0A5C                            u851 0978                            u771 0866  
                          u940 0A72                            u860 09AA                            u780 0898  
                          u941 0A6E                            u861 09A4                            u781 0892  
                          u950 0AB8                            u870 09AC                            u790 089A  
                          u951 0AB4                            u960 0ACA                            u880 09C2  
                          u961 0AC6                            u881 09BE                            u970 0AFC  
                          u890 09EE                            u971 0AF8                            u891 09EA  
                          u980 0B20                            u981 0B1C                            u990 0B34  
                          u991 0B30                            wreg 000FE8                           l1320 0EFC  
                         l1400 0EE4                           l1330 0F30                           l1322 0F04  
                         l1410 0D60                           l1402 0F48                           l1332 0F3E  
                         l1324 0F12                           l1340 1184                           l1420 0D88  
                         l1412 0D78                           l1404 0F54                           l1500 0D28  
                         l1326 0F1A                           l1318 0EEE                           l1342 1194  
                         l1334 117A                           l1422 0D8E                           l1414 0D80  
                         l1350 10C8                           l1406 0F70                           l1502 0D3A  
                         l1510 085A                           l1328 0F28                           l1336 117C  
                         l1440 0DD0                           l1432 0DB6                           l1360 10DC  
                         l1352 10CA                           l1344 10B2                           l1408 0F74  
                         l1600 0AB8                           l1520 08B4                           l1512 086A  
                         l1258 11AE                           l1338 1182                           l1450 0E06  
                         l1434 0DBA                           l1426 0DA0                           l1362 10E4  
                         l1354 10D2                           l1346 10BE                           l1370 116E  
                         l1610 0AFC                           l1602 0ACA                           l1530 08DE  
                         l1522 08B8                           l1460 1014                           l1444 0DE2  
                         l1428 0DA4                           l1356 10D4                           l1348 10C0  
                         l1364 1078                           l1380 0FE4                           l1620 0B46  
                         l1612 0B04                           l1540 0950                           l1532 08FA  
                         l1524 08C2                           l1516 089E                           l1508 0850  
                         l1700 104E                           l1462 1026                           l1454 0FF0  
                         l1446 0DEC                           l1438 0DCC                           l1390 0EAA  
                         l1358 10DA                           l1382 0FE8                           l1374 0F9E  
                         l1470 0BEE                           l1630 0B60                           l1622 0B52  
                         l1614 0B20                           l1550 096C                           l1542 0954  
                         l1534 090A                           l1526 08CE                           l1518 08B0  
                         l1702 1058                           l1464 102E                           l1456 0FFA  
                         l1448 0E02                           l1392 0EB0                           l1368 1152  
                         l1376 0FA2                           l1472 0BF2                           l1632 0B74  
                         l1624 0B54                           l1616 0B34                           l1608 0AD2  
                         l1560 09C6                           l1552 097C                           l1544 0958  
                         l1528 08D8                           l1704 1064                           l1650 0E16  
                         l1458 1006                           l1394 0EBA                           l1386 0E88  
                         l1378 0FB6                           l1490 0CA2                           l1482 0C4A  
                         l1474 0C0C                           l1466 0BD6                           l1714 0BA6  
                         l1634 0B78                           l1618 0B3C                           l1570 09EE  
                         l1562 09CA                           l1546 0962                           l1538 093E  
                         l1642 0B92                           l1660 0E44                           l1652 0E1C  
                         l1396 0ECC                           l1388 0E98                           l1716 0C8C  
                         l1484 0C60                           l1476 0C40                           l1468 0BEA  
                         l1636 0B82                           l1628 0B5C                           l1580 0A3C  
                         l1564 09D4                           l1556 09B0                           l1670 0E6C  
                         l1662 0E54                           l1654 0E2A                           l1398 0EDE  
                         l1494 0CDA                           l1486 0C68                           l1478 0C44  
                         l1590 0A72                           l1582 0A46                           l1574 0A22  
                         l1558 09C2                           l1648 1198                           l1672 0E72  
                         l1664 0E5A                           l1656 0E30                           l1488 0C70  
                         l1592 0A76                           l1576 0A34                           l1568 09DE  
                         l1680 1122                           l1674 0E78                           l1666 0E60  
                         l1658 0E3E                           l1498 0D16                           l1594 0A80  
                         l1586 0A50                           l1578 0A38                           l1682 112C  
                         l1676 0E7E                           l1668 0E66                           l1596 0A8C  
                         l1588 0A60                           l1684 1130                           l1692 103A  
                         l1598 0AA8                           l1686 1136                           l1678 111E  
                         l1694 1042                           l1696 1046                           l1698 104A  
                         _ADON 007E10  __end_ofKeypad_Key_Press@F3594 0812                           STR_1 0823  
                         STR_2 0823                           STR_3 0833                           STR_4 0812  
                         STR_5 0842                           u1000 1150                           u1001 114C  
                         u1017 1124                           u1027 08E8                           u1037 0A96  
                         u1047 10CC                           u1057 10DE                           u1067 0E22  
                         u1077 0E36                           u1087 0E4A                           _LATC 000F8B  
                         _LATD 000F8C                           u1097 118A          __end_of_RepetirOpcion 1152  
            ?_Lcd_Write_String 0005                           _atoi 0BD6                           _main 103A  
                         fsr2h 000FDA                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           prodh 000FF4                           prodl 000FF3  
                         start 0000             ??_Lcd_Write_String 0007                __end_of_Lcd_Cmd 1198  
                 ___param_bank 000000               ??_ContadorCarros 0001                          ?_atoi 0008  
                        ?_main 0001                  ??_Keypad_Init 0001                          _TMR0L 000FD6  
                        _PORTD 000F83        __size_of_Lcd_Set_Cursor 0066                          _TRISB 000F93  
                        _TRISC 000F94                          _TRISD 000F95                __end_of_isdigit 10B0  
                        atoi@n 0015                          atoi@s 0008                          _mynum 0034  
              __end_of_isspace 0FF0                          tablat 000FF5                          status 000FD8  
             __end_of_Lcd_Init 0E86               __end_of_Lcd_Port 0F48                __initialization 10E8  
                 __end_of_atoi 0D60                   __end_of_main 1078                 _Estado_Teclado 0029  
                       ??_atoi 000A                         ??_main 0027             __size_of_Lcd_Clear 000E  
                __activetblptr 000002                         _ADCON1 000FC1                         _ADCON2 000FC0  
                       _ADRESH 000FC4            __end_of_Keypad_Init 11B4                      ??_Lcd_Cmd 0002  
      __size_of_Lcd_Write_Char 0038                         ___wmul 1152      __size_of_Keypad_Key_Press 00B6  
                       clear_0 110E                   __pdataCOMRAM 0030                      ??_isdigit 0003  
                 __mediumconst 0000                      ??_isspace 0003                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                Lcd_Set_Cursor@a 0005  
              Lcd_Set_Cursor@b 0004                Lcd_Set_Cursor@y 0007                Lcd_Set_Cursor@z 0006  
                   __accesstop 0060        __end_of__initialization 1114              __end_of_Lcd_Clear 11A6  
                ___rparam_used 000001                 __pcstackCOMRAM 0001                 _Lcd_Set_Cursor 0E86  
                  _Keypad_Init 11AE                      ?_Lcd_Init 0001                      ?_Lcd_Port 0001  
                      ?___wmul 0001      __size_of_Lcd_Write_String 0056         __end_of_Lcd_Set_Cursor 0EEC  
                  _SelectTecla 002A                        _GO_DONE 007E11                     ??_Lcd_Init 0004  
                   ??_Lcd_Port 0001                 _Lcd_Write_Char 10B0                        _Lcd_Cmd 1178  
                      _MYcount 002F          Keypad_Key_Press@F3594 0801                        __Hparam 0000  
                      __Lparam 0000                __size_of___wmul 0026          Keypad_Key_Press@tecla 0012  
             _Keypad_Key_Press 0D60                   __psmallconst 0800                        __pcinit 10E8  
                      __ramtop 0800                ?_Lcd_Set_Cursor 0004                        __ptext0 103A  
                      __ptext1 111E                        __ptext2 0850                        __ptext3 0BD6  
                      __ptext4 0F9E                        __ptext5 1078                        __ptext6 1152  
                      __ptext7 0F48                        __ptext8 10B0                        __ptext9 0E86  
       __size_of_RepetirOpcion 0034                      _T0CONbits 000FD5                        _isdigit 1078  
                      _isspace 0F9E                        _retardo 0036                        atoi@neg 000E  
       __end_of_Lcd_Write_Char 10E8           end_of_initialization 1114                  __Lmediumconst 0000  
                      postdec1 000FE5                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE                      Lcd_Port@a 0001                      _PORTBbits 000F81  
                    _PORTDbits 000F83                      _TRISAbits 000F92        __size_of_ContadorCarros 004A  
              ?_Lcd_Write_Char 0001              Lcd_Write_String@a 0005              Lcd_Write_String@i 0009  
                    _AlmContra 0030                  _RepetirOpcion 111E                      _Lcd_Clear 1198  
            _Validacion_Contra 0850                 __end_of___wmul 1178             ?_Validacion_Contra 0001  
             _Lcd_Write_String 0F48                  __pidataCOMRAM 11A6                   ?_Keypad_Init 0001  
          ??_Validacion_Contra 0017            start_initialization 10E8              __size_of_Lcd_Init 0070  
            __size_of_Lcd_Port 005C                 ?_RepetirOpcion 0025      __end_of_Validacion_Contra 0BD6  
        _Validacion_Contra$341 001B          _Validacion_Contra$345 001D          _Validacion_Contra$346 001F  
        _Validacion_Contra$347 0021                     ?_Lcd_Clear 0001                       ??___wmul 0005  
              Lcd_Write_Char@a 0004                Lcd_Write_Char@y 0003                    __pbssCOMRAM 0027  
     __end_of_Keypad_Key_Press 0E16                       ?_Lcd_Cmd 0001               ??_Lcd_Set_Cursor 0005  
                  __smallconst 0800                       ?_isdigit 0001                 _ContadorCarros 0FF0  
                     ?_isspace 0001           Keypad_Key_Press@fila 0014                ??_RepetirOpcion 0027  
                 _SelectContra 002B                 ___wmul@product 0005     __size_of_Validacion_Contra 0386  
                     Lcd_Cmd@a 0003                    ??_Lcd_Clear 0004              ___wmul@multiplier 0001  
       __end_of_ContadorCarros 103A               ??_Lcd_Write_Char 0002                       _Lcd_Init 0E16  
         __size_of_Keypad_Init 0006                       _Lcd_Port 0EEC                      copy_data0 10FC  
     __end_of_Lcd_Write_String 0F9E               __size_of_Lcd_Cmd 0020             Validacion_Contra@i 0023  
                     __Hrparam 0000                       __Lrparam 0000         Keypad_Key_Press@keypad 0001  
              ?_ContadorCarros 0001                       _atoi$813 0010                       _atoi$814 0014  
                     _atoi$815 0012               __size_of_isdigit 0038               __size_of_isspace 0052  
                     __ptext10 0D60                       __ptext11 0FF0                       __ptext12 0E16  
                     __ptext13 1198                       __ptext14 1178                       __ptext15 0EEC  
                     __ptext16 11AE                       _contador 0027                  __size_of_atoi 018A  
                __size_of_main 003E             RepetirOpcion@valor 0025                    _isspace$831 0007  
                   _INTCONbits 000FF2                       isdigit@c 0001             Lcd_Write_Char@temp 0002  
            ?_Keypad_Key_Press 0001                       isspace@c 0001             ??_Keypad_Key_Press 0001  
           Lcd_Set_Cursor@temp 0008  
